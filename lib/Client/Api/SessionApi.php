<?php
/**
 * SessionApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ShapeDiver\GeometryApiV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Geometry Backend API v2
 *
 * The ShapeDiver Geometry Backend system is used to: * host Grasshopper models in a secure, reliable, scalable, and performant way, * run computations of Grasshopper models, * and cache and output the results of computations and exports.
 *
 * The version of the OpenAPI document: 1.13.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ShapeDiver\GeometryApiV2\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ShapeDiver\GeometryApiV2\Client\ApiException;
use ShapeDiver\GeometryApiV2\Client\Configuration;
use ShapeDiver\GeometryApiV2\Client\HeaderSelector;
use ShapeDiver\GeometryApiV2\Client\ObjectSerializer;

/**
 * SessionApi Class Doc Comment
 *
 * @category Class
 * @package  ShapeDiver\GeometryApiV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SessionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'closeSession' => [
            'application/json',
        ],
        'createSessionByModel' => [
            'application/json',
        ],
        'createSessionByTicket' => [
            'application/json',
        ],
        'createTicket' => [
            'application/json',
        ],
        'decryptTicket' => [
            'application/json',
        ],
        'getSessionDefaults' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation closeSession
     *
     * Close session.
     *
     * @param  string $sessionId Session ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeSession'] to see the possible values for this operation
     *
     * @throws \ShapeDiver\GeometryApiV2\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ShapeDiver\GeometryApiV2\Client\Model\ResCloseSession|\ShapeDiver\GeometryApiV2\Client\Model\ResError
     */
    public function closeSession($sessionId, string $contentType = self::contentTypes['closeSession'][0])
    {
        list($response) = $this->closeSessionWithHttpInfo($sessionId, $contentType);
        return $response;
    }

    /**
     * Operation closeSessionWithHttpInfo
     *
     * Close session.
     *
     * @param  string $sessionId Session ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeSession'] to see the possible values for this operation
     *
     * @throws \ShapeDiver\GeometryApiV2\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ShapeDiver\GeometryApiV2\Client\Model\ResCloseSession|\ShapeDiver\GeometryApiV2\Client\Model\ResError, HTTP status code, HTTP response headers (array of strings)
     */
    public function closeSessionWithHttpInfo($sessionId, string $contentType = self::contentTypes['closeSession'][0])
    {
        $request = $this->closeSessionRequest($sessionId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ShapeDiver\GeometryApiV2\Client\Model\ResCloseSession' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ShapeDiver\GeometryApiV2\Client\Model\ResCloseSession' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ShapeDiver\GeometryApiV2\Client\Model\ResCloseSession', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ShapeDiver\GeometryApiV2\Client\Model\ResError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ShapeDiver\GeometryApiV2\Client\Model\ResError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ShapeDiver\GeometryApiV2\Client\Model\ResError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ShapeDiver\GeometryApiV2\Client\Model\ResCloseSession';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ShapeDiver\GeometryApiV2\Client\Model\ResCloseSession',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ShapeDiver\GeometryApiV2\Client\Model\ResError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation closeSessionAsync
     *
     * Close session.
     *
     * @param  string $sessionId Session ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function closeSessionAsync($sessionId, string $contentType = self::contentTypes['closeSession'][0])
    {
        return $this->closeSessionAsyncWithHttpInfo($sessionId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation closeSessionAsyncWithHttpInfo
     *
     * Close session.
     *
     * @param  string $sessionId Session ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function closeSessionAsyncWithHttpInfo($sessionId, string $contentType = self::contentTypes['closeSession'][0])
    {
        $returnType = '\ShapeDiver\GeometryApiV2\Client\Model\ResCloseSession';
        $request = $this->closeSessionRequest($sessionId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'closeSession'
     *
     * @param  string $sessionId Session ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function closeSessionRequest($sessionId, string $contentType = self::contentTypes['closeSession'][0])
    {

        // verify the required parameter 'sessionId' is set
        if ($sessionId === null || (is_array($sessionId) && count($sessionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sessionId when calling closeSession'
            );
        }


        $resourcePath = '/api/v2/session/{sessionId}/close';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sessionId !== null) {
            $resourcePath = str_replace(
                '{' . 'sessionId' . '}',
                ObjectSerializer::toPathValue($sessionId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSessionByModel
     *
     * Initialize new session by model ID.
     *
     * @param  string $modelId Model ID. (required)
     * @param  string|null $modelStateId ID of the Model-State to apply. (optional)
     * @param  bool|null $ignoreUnknownParams Allow relaxed validation of parameter identifiers for customization and export requests. When set to &#x60;true&#x60;, unknown parameter IDs will be ignored instead of causing an error.  Defaults to &#x60;false&#x60;. (optional)
     * @param  bool|null $strictModelStateValidation When set to &#x60;false&#x60;, any Model-State parameter that cannot be applied to the model - either because the parameter ID is unknown or the parameter value is invalid - will be ignored. When set to &#x60;true&#x60;, any validation error will result in an error response.  Defaults to &#x60;false&#x60;. (optional)
     * @param  \ShapeDiver\GeometryApiV2\Client\Model\ReqCustomizationOrExport|null $reqCustomizationOrExport reqCustomizationOrExport (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSessionByModel'] to see the possible values for this operation
     *
     * @throws \ShapeDiver\GeometryApiV2\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByModel|\ShapeDiver\GeometryApiV2\Client\Model\ResError
     */
    public function createSessionByModel($modelId, $modelStateId = null, $ignoreUnknownParams = null, $strictModelStateValidation = null, $reqCustomizationOrExport = null, string $contentType = self::contentTypes['createSessionByModel'][0])
    {
        list($response) = $this->createSessionByModelWithHttpInfo($modelId, $modelStateId, $ignoreUnknownParams, $strictModelStateValidation, $reqCustomizationOrExport, $contentType);
        return $response;
    }

    /**
     * Operation createSessionByModelWithHttpInfo
     *
     * Initialize new session by model ID.
     *
     * @param  string $modelId Model ID. (required)
     * @param  string|null $modelStateId ID of the Model-State to apply. (optional)
     * @param  bool|null $ignoreUnknownParams Allow relaxed validation of parameter identifiers for customization and export requests. When set to &#x60;true&#x60;, unknown parameter IDs will be ignored instead of causing an error.  Defaults to &#x60;false&#x60;. (optional)
     * @param  bool|null $strictModelStateValidation When set to &#x60;false&#x60;, any Model-State parameter that cannot be applied to the model - either because the parameter ID is unknown or the parameter value is invalid - will be ignored. When set to &#x60;true&#x60;, any validation error will result in an error response.  Defaults to &#x60;false&#x60;. (optional)
     * @param  \ShapeDiver\GeometryApiV2\Client\Model\ReqCustomizationOrExport|null $reqCustomizationOrExport (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSessionByModel'] to see the possible values for this operation
     *
     * @throws \ShapeDiver\GeometryApiV2\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByModel|\ShapeDiver\GeometryApiV2\Client\Model\ResError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSessionByModelWithHttpInfo($modelId, $modelStateId = null, $ignoreUnknownParams = null, $strictModelStateValidation = null, $reqCustomizationOrExport = null, string $contentType = self::contentTypes['createSessionByModel'][0])
    {
        $request = $this->createSessionByModelRequest($modelId, $modelStateId, $ignoreUnknownParams, $strictModelStateValidation, $reqCustomizationOrExport, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ShapeDiver\GeometryApiV2\Client\Model\ResError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ShapeDiver\GeometryApiV2\Client\Model\ResError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ShapeDiver\GeometryApiV2\Client\Model\ResError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ShapeDiver\GeometryApiV2\Client\Model\ResError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSessionByModelAsync
     *
     * Initialize new session by model ID.
     *
     * @param  string $modelId Model ID. (required)
     * @param  string|null $modelStateId ID of the Model-State to apply. (optional)
     * @param  bool|null $ignoreUnknownParams Allow relaxed validation of parameter identifiers for customization and export requests. When set to &#x60;true&#x60;, unknown parameter IDs will be ignored instead of causing an error.  Defaults to &#x60;false&#x60;. (optional)
     * @param  bool|null $strictModelStateValidation When set to &#x60;false&#x60;, any Model-State parameter that cannot be applied to the model - either because the parameter ID is unknown or the parameter value is invalid - will be ignored. When set to &#x60;true&#x60;, any validation error will result in an error response.  Defaults to &#x60;false&#x60;. (optional)
     * @param  \ShapeDiver\GeometryApiV2\Client\Model\ReqCustomizationOrExport|null $reqCustomizationOrExport (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSessionByModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSessionByModelAsync($modelId, $modelStateId = null, $ignoreUnknownParams = null, $strictModelStateValidation = null, $reqCustomizationOrExport = null, string $contentType = self::contentTypes['createSessionByModel'][0])
    {
        return $this->createSessionByModelAsyncWithHttpInfo($modelId, $modelStateId, $ignoreUnknownParams, $strictModelStateValidation, $reqCustomizationOrExport, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSessionByModelAsyncWithHttpInfo
     *
     * Initialize new session by model ID.
     *
     * @param  string $modelId Model ID. (required)
     * @param  string|null $modelStateId ID of the Model-State to apply. (optional)
     * @param  bool|null $ignoreUnknownParams Allow relaxed validation of parameter identifiers for customization and export requests. When set to &#x60;true&#x60;, unknown parameter IDs will be ignored instead of causing an error.  Defaults to &#x60;false&#x60;. (optional)
     * @param  bool|null $strictModelStateValidation When set to &#x60;false&#x60;, any Model-State parameter that cannot be applied to the model - either because the parameter ID is unknown or the parameter value is invalid - will be ignored. When set to &#x60;true&#x60;, any validation error will result in an error response.  Defaults to &#x60;false&#x60;. (optional)
     * @param  \ShapeDiver\GeometryApiV2\Client\Model\ReqCustomizationOrExport|null $reqCustomizationOrExport (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSessionByModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSessionByModelAsyncWithHttpInfo($modelId, $modelStateId = null, $ignoreUnknownParams = null, $strictModelStateValidation = null, $reqCustomizationOrExport = null, string $contentType = self::contentTypes['createSessionByModel'][0])
    {
        $returnType = '\ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByModel';
        $request = $this->createSessionByModelRequest($modelId, $modelStateId, $ignoreUnknownParams, $strictModelStateValidation, $reqCustomizationOrExport, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSessionByModel'
     *
     * @param  string $modelId Model ID. (required)
     * @param  string|null $modelStateId ID of the Model-State to apply. (optional)
     * @param  bool|null $ignoreUnknownParams Allow relaxed validation of parameter identifiers for customization and export requests. When set to &#x60;true&#x60;, unknown parameter IDs will be ignored instead of causing an error.  Defaults to &#x60;false&#x60;. (optional)
     * @param  bool|null $strictModelStateValidation When set to &#x60;false&#x60;, any Model-State parameter that cannot be applied to the model - either because the parameter ID is unknown or the parameter value is invalid - will be ignored. When set to &#x60;true&#x60;, any validation error will result in an error response.  Defaults to &#x60;false&#x60;. (optional)
     * @param  \ShapeDiver\GeometryApiV2\Client\Model\ReqCustomizationOrExport|null $reqCustomizationOrExport (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSessionByModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSessionByModelRequest($modelId, $modelStateId = null, $ignoreUnknownParams = null, $strictModelStateValidation = null, $reqCustomizationOrExport = null, string $contentType = self::contentTypes['createSessionByModel'][0])
    {

        // verify the required parameter 'modelId' is set
        if ($modelId === null || (is_array($modelId) && count($modelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modelId when calling createSessionByModel'
            );
        }






        $resourcePath = '/api/v2/model/{modelId}/session';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modelStateId,
            'modelStateId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ignoreUnknownParams,
            'ignoreUnknownParams', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $strictModelStateValidation,
            'strictModelStateValidation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($modelId !== null) {
            $resourcePath = str_replace(
                '{' . 'modelId' . '}',
                ObjectSerializer::toPathValue($modelId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($reqCustomizationOrExport)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($reqCustomizationOrExport));
            } else {
                $httpBody = $reqCustomizationOrExport;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSessionByTicket
     *
     * Initialize new session by ticket.
     *
     * @param  string $ticketId Encrypted ticket. (required)
     * @param  string|null $modelStateId ID of the Model-State to apply. (optional)
     * @param  bool|null $ignoreUnknownParams Allow relaxed validation of parameter identifiers for customization and export requests. When set to &#x60;true&#x60;, unknown parameter IDs will be ignored instead of causing an error.  Defaults to &#x60;false&#x60;. (optional)
     * @param  bool|null $strictModelStateValidation When set to &#x60;false&#x60;, any Model-State parameter that cannot be applied to the model - either because the parameter ID is unknown or the parameter value is invalid - will be ignored. When set to &#x60;true&#x60;, any validation error will result in an error response.  Defaults to &#x60;false&#x60;. (optional)
     * @param  \ShapeDiver\GeometryApiV2\Client\Model\ReqCustomizationOrExport|null $reqCustomizationOrExport reqCustomizationOrExport (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSessionByTicket'] to see the possible values for this operation
     *
     * @throws \ShapeDiver\GeometryApiV2\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByTicket|\ShapeDiver\GeometryApiV2\Client\Model\ResError
     */
    public function createSessionByTicket($ticketId, $modelStateId = null, $ignoreUnknownParams = null, $strictModelStateValidation = null, $reqCustomizationOrExport = null, string $contentType = self::contentTypes['createSessionByTicket'][0])
    {
        list($response) = $this->createSessionByTicketWithHttpInfo($ticketId, $modelStateId, $ignoreUnknownParams, $strictModelStateValidation, $reqCustomizationOrExport, $contentType);
        return $response;
    }

    /**
     * Operation createSessionByTicketWithHttpInfo
     *
     * Initialize new session by ticket.
     *
     * @param  string $ticketId Encrypted ticket. (required)
     * @param  string|null $modelStateId ID of the Model-State to apply. (optional)
     * @param  bool|null $ignoreUnknownParams Allow relaxed validation of parameter identifiers for customization and export requests. When set to &#x60;true&#x60;, unknown parameter IDs will be ignored instead of causing an error.  Defaults to &#x60;false&#x60;. (optional)
     * @param  bool|null $strictModelStateValidation When set to &#x60;false&#x60;, any Model-State parameter that cannot be applied to the model - either because the parameter ID is unknown or the parameter value is invalid - will be ignored. When set to &#x60;true&#x60;, any validation error will result in an error response.  Defaults to &#x60;false&#x60;. (optional)
     * @param  \ShapeDiver\GeometryApiV2\Client\Model\ReqCustomizationOrExport|null $reqCustomizationOrExport (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSessionByTicket'] to see the possible values for this operation
     *
     * @throws \ShapeDiver\GeometryApiV2\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByTicket|\ShapeDiver\GeometryApiV2\Client\Model\ResError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSessionByTicketWithHttpInfo($ticketId, $modelStateId = null, $ignoreUnknownParams = null, $strictModelStateValidation = null, $reqCustomizationOrExport = null, string $contentType = self::contentTypes['createSessionByTicket'][0])
    {
        $request = $this->createSessionByTicketRequest($ticketId, $modelStateId, $ignoreUnknownParams, $strictModelStateValidation, $reqCustomizationOrExport, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByTicket' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByTicket' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByTicket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ShapeDiver\GeometryApiV2\Client\Model\ResError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ShapeDiver\GeometryApiV2\Client\Model\ResError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ShapeDiver\GeometryApiV2\Client\Model\ResError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByTicket';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByTicket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ShapeDiver\GeometryApiV2\Client\Model\ResError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSessionByTicketAsync
     *
     * Initialize new session by ticket.
     *
     * @param  string $ticketId Encrypted ticket. (required)
     * @param  string|null $modelStateId ID of the Model-State to apply. (optional)
     * @param  bool|null $ignoreUnknownParams Allow relaxed validation of parameter identifiers for customization and export requests. When set to &#x60;true&#x60;, unknown parameter IDs will be ignored instead of causing an error.  Defaults to &#x60;false&#x60;. (optional)
     * @param  bool|null $strictModelStateValidation When set to &#x60;false&#x60;, any Model-State parameter that cannot be applied to the model - either because the parameter ID is unknown or the parameter value is invalid - will be ignored. When set to &#x60;true&#x60;, any validation error will result in an error response.  Defaults to &#x60;false&#x60;. (optional)
     * @param  \ShapeDiver\GeometryApiV2\Client\Model\ReqCustomizationOrExport|null $reqCustomizationOrExport (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSessionByTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSessionByTicketAsync($ticketId, $modelStateId = null, $ignoreUnknownParams = null, $strictModelStateValidation = null, $reqCustomizationOrExport = null, string $contentType = self::contentTypes['createSessionByTicket'][0])
    {
        return $this->createSessionByTicketAsyncWithHttpInfo($ticketId, $modelStateId, $ignoreUnknownParams, $strictModelStateValidation, $reqCustomizationOrExport, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSessionByTicketAsyncWithHttpInfo
     *
     * Initialize new session by ticket.
     *
     * @param  string $ticketId Encrypted ticket. (required)
     * @param  string|null $modelStateId ID of the Model-State to apply. (optional)
     * @param  bool|null $ignoreUnknownParams Allow relaxed validation of parameter identifiers for customization and export requests. When set to &#x60;true&#x60;, unknown parameter IDs will be ignored instead of causing an error.  Defaults to &#x60;false&#x60;. (optional)
     * @param  bool|null $strictModelStateValidation When set to &#x60;false&#x60;, any Model-State parameter that cannot be applied to the model - either because the parameter ID is unknown or the parameter value is invalid - will be ignored. When set to &#x60;true&#x60;, any validation error will result in an error response.  Defaults to &#x60;false&#x60;. (optional)
     * @param  \ShapeDiver\GeometryApiV2\Client\Model\ReqCustomizationOrExport|null $reqCustomizationOrExport (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSessionByTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSessionByTicketAsyncWithHttpInfo($ticketId, $modelStateId = null, $ignoreUnknownParams = null, $strictModelStateValidation = null, $reqCustomizationOrExport = null, string $contentType = self::contentTypes['createSessionByTicket'][0])
    {
        $returnType = '\ShapeDiver\GeometryApiV2\Client\Model\ResCreateSessionByTicket';
        $request = $this->createSessionByTicketRequest($ticketId, $modelStateId, $ignoreUnknownParams, $strictModelStateValidation, $reqCustomizationOrExport, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSessionByTicket'
     *
     * @param  string $ticketId Encrypted ticket. (required)
     * @param  string|null $modelStateId ID of the Model-State to apply. (optional)
     * @param  bool|null $ignoreUnknownParams Allow relaxed validation of parameter identifiers for customization and export requests. When set to &#x60;true&#x60;, unknown parameter IDs will be ignored instead of causing an error.  Defaults to &#x60;false&#x60;. (optional)
     * @param  bool|null $strictModelStateValidation When set to &#x60;false&#x60;, any Model-State parameter that cannot be applied to the model - either because the parameter ID is unknown or the parameter value is invalid - will be ignored. When set to &#x60;true&#x60;, any validation error will result in an error response.  Defaults to &#x60;false&#x60;. (optional)
     * @param  \ShapeDiver\GeometryApiV2\Client\Model\ReqCustomizationOrExport|null $reqCustomizationOrExport (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSessionByTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSessionByTicketRequest($ticketId, $modelStateId = null, $ignoreUnknownParams = null, $strictModelStateValidation = null, $reqCustomizationOrExport = null, string $contentType = self::contentTypes['createSessionByTicket'][0])
    {

        // verify the required parameter 'ticketId' is set
        if ($ticketId === null || (is_array($ticketId) && count($ticketId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticketId when calling createSessionByTicket'
            );
        }






        $resourcePath = '/api/v2/ticket/{ticketId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modelStateId,
            'modelStateId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ignoreUnknownParams,
            'ignoreUnknownParams', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $strictModelStateValidation,
            'strictModelStateValidation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($ticketId !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticketId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($reqCustomizationOrExport)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($reqCustomizationOrExport));
            } else {
                $httpBody = $reqCustomizationOrExport;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTicket
     *
     * Create a new ticket that allows to initialize a new session.
     *
     * @param  string $modelId Model ID. (required)
     * @param  \ShapeDiver\GeometryApiV2\Client\Model\ReqTicket $reqTicket reqTicket (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTicket'] to see the possible values for this operation
     *
     * @throws \ShapeDiver\GeometryApiV2\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ShapeDiver\GeometryApiV2\Client\Model\ResCreateTicket|\ShapeDiver\GeometryApiV2\Client\Model\ResError
     */
    public function createTicket($modelId, $reqTicket, string $contentType = self::contentTypes['createTicket'][0])
    {
        list($response) = $this->createTicketWithHttpInfo($modelId, $reqTicket, $contentType);
        return $response;
    }

    /**
     * Operation createTicketWithHttpInfo
     *
     * Create a new ticket that allows to initialize a new session.
     *
     * @param  string $modelId Model ID. (required)
     * @param  \ShapeDiver\GeometryApiV2\Client\Model\ReqTicket $reqTicket (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTicket'] to see the possible values for this operation
     *
     * @throws \ShapeDiver\GeometryApiV2\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ShapeDiver\GeometryApiV2\Client\Model\ResCreateTicket|\ShapeDiver\GeometryApiV2\Client\Model\ResError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTicketWithHttpInfo($modelId, $reqTicket, string $contentType = self::contentTypes['createTicket'][0])
    {
        $request = $this->createTicketRequest($modelId, $reqTicket, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ShapeDiver\GeometryApiV2\Client\Model\ResCreateTicket' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ShapeDiver\GeometryApiV2\Client\Model\ResCreateTicket' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ShapeDiver\GeometryApiV2\Client\Model\ResCreateTicket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ShapeDiver\GeometryApiV2\Client\Model\ResError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ShapeDiver\GeometryApiV2\Client\Model\ResError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ShapeDiver\GeometryApiV2\Client\Model\ResError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ShapeDiver\GeometryApiV2\Client\Model\ResCreateTicket';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ShapeDiver\GeometryApiV2\Client\Model\ResCreateTicket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ShapeDiver\GeometryApiV2\Client\Model\ResError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTicketAsync
     *
     * Create a new ticket that allows to initialize a new session.
     *
     * @param  string $modelId Model ID. (required)
     * @param  \ShapeDiver\GeometryApiV2\Client\Model\ReqTicket $reqTicket (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTicketAsync($modelId, $reqTicket, string $contentType = self::contentTypes['createTicket'][0])
    {
        return $this->createTicketAsyncWithHttpInfo($modelId, $reqTicket, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTicketAsyncWithHttpInfo
     *
     * Create a new ticket that allows to initialize a new session.
     *
     * @param  string $modelId Model ID. (required)
     * @param  \ShapeDiver\GeometryApiV2\Client\Model\ReqTicket $reqTicket (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTicketAsyncWithHttpInfo($modelId, $reqTicket, string $contentType = self::contentTypes['createTicket'][0])
    {
        $returnType = '\ShapeDiver\GeometryApiV2\Client\Model\ResCreateTicket';
        $request = $this->createTicketRequest($modelId, $reqTicket, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTicket'
     *
     * @param  string $modelId Model ID. (required)
     * @param  \ShapeDiver\GeometryApiV2\Client\Model\ReqTicket $reqTicket (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createTicketRequest($modelId, $reqTicket, string $contentType = self::contentTypes['createTicket'][0])
    {

        // verify the required parameter 'modelId' is set
        if ($modelId === null || (is_array($modelId) && count($modelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modelId when calling createTicket'
            );
        }

        // verify the required parameter 'reqTicket' is set
        if ($reqTicket === null || (is_array($reqTicket) && count($reqTicket) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reqTicket when calling createTicket'
            );
        }


        $resourcePath = '/api/v2/model/{modelId}/ticket';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($modelId !== null) {
            $resourcePath = str_replace(
                '{' . 'modelId' . '}',
                ObjectSerializer::toPathValue($modelId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($reqTicket)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($reqTicket));
            } else {
                $httpBody = $reqTicket;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation decryptTicket
     *
     * Decrypt the given ticket and return its details.
     *
     * @param  string $ticketEncrypted Encrypted ShapeDiver ticket. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['decryptTicket'] to see the possible values for this operation
     *
     * @throws \ShapeDiver\GeometryApiV2\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ShapeDiver\GeometryApiV2\Client\Model\ResDecryptTicket|\ShapeDiver\GeometryApiV2\Client\Model\ResError
     */
    public function decryptTicket($ticketEncrypted, string $contentType = self::contentTypes['decryptTicket'][0])
    {
        list($response) = $this->decryptTicketWithHttpInfo($ticketEncrypted, $contentType);
        return $response;
    }

    /**
     * Operation decryptTicketWithHttpInfo
     *
     * Decrypt the given ticket and return its details.
     *
     * @param  string $ticketEncrypted Encrypted ShapeDiver ticket. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['decryptTicket'] to see the possible values for this operation
     *
     * @throws \ShapeDiver\GeometryApiV2\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ShapeDiver\GeometryApiV2\Client\Model\ResDecryptTicket|\ShapeDiver\GeometryApiV2\Client\Model\ResError, HTTP status code, HTTP response headers (array of strings)
     */
    public function decryptTicketWithHttpInfo($ticketEncrypted, string $contentType = self::contentTypes['decryptTicket'][0])
    {
        $request = $this->decryptTicketRequest($ticketEncrypted, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ShapeDiver\GeometryApiV2\Client\Model\ResDecryptTicket' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ShapeDiver\GeometryApiV2\Client\Model\ResDecryptTicket' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ShapeDiver\GeometryApiV2\Client\Model\ResDecryptTicket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ShapeDiver\GeometryApiV2\Client\Model\ResError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ShapeDiver\GeometryApiV2\Client\Model\ResError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ShapeDiver\GeometryApiV2\Client\Model\ResError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ShapeDiver\GeometryApiV2\Client\Model\ResDecryptTicket';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ShapeDiver\GeometryApiV2\Client\Model\ResDecryptTicket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ShapeDiver\GeometryApiV2\Client\Model\ResError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation decryptTicketAsync
     *
     * Decrypt the given ticket and return its details.
     *
     * @param  string $ticketEncrypted Encrypted ShapeDiver ticket. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['decryptTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function decryptTicketAsync($ticketEncrypted, string $contentType = self::contentTypes['decryptTicket'][0])
    {
        return $this->decryptTicketAsyncWithHttpInfo($ticketEncrypted, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation decryptTicketAsyncWithHttpInfo
     *
     * Decrypt the given ticket and return its details.
     *
     * @param  string $ticketEncrypted Encrypted ShapeDiver ticket. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['decryptTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function decryptTicketAsyncWithHttpInfo($ticketEncrypted, string $contentType = self::contentTypes['decryptTicket'][0])
    {
        $returnType = '\ShapeDiver\GeometryApiV2\Client\Model\ResDecryptTicket';
        $request = $this->decryptTicketRequest($ticketEncrypted, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'decryptTicket'
     *
     * @param  string $ticketEncrypted Encrypted ShapeDiver ticket. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['decryptTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function decryptTicketRequest($ticketEncrypted, string $contentType = self::contentTypes['decryptTicket'][0])
    {

        // verify the required parameter 'ticketEncrypted' is set
        if ($ticketEncrypted === null || (is_array($ticketEncrypted) && count($ticketEncrypted) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticketEncrypted when calling decryptTicket'
            );
        }


        $resourcePath = '/api/v2/ticket/{ticketEncrypted}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticketEncrypted !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketEncrypted' . '}',
                ObjectSerializer::toPathValue($ticketEncrypted),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSessionDefaults
     *
     * Get session defaults (corresponds to the content of the session initialization request).
     *
     * @param  string $sessionId Session ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSessionDefaults'] to see the possible values for this operation
     *
     * @throws \ShapeDiver\GeometryApiV2\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ShapeDiver\GeometryApiV2\Client\Model\ResGetSessionDefaults|\ShapeDiver\GeometryApiV2\Client\Model\ResError
     */
    public function getSessionDefaults($sessionId, string $contentType = self::contentTypes['getSessionDefaults'][0])
    {
        list($response) = $this->getSessionDefaultsWithHttpInfo($sessionId, $contentType);
        return $response;
    }

    /**
     * Operation getSessionDefaultsWithHttpInfo
     *
     * Get session defaults (corresponds to the content of the session initialization request).
     *
     * @param  string $sessionId Session ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSessionDefaults'] to see the possible values for this operation
     *
     * @throws \ShapeDiver\GeometryApiV2\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ShapeDiver\GeometryApiV2\Client\Model\ResGetSessionDefaults|\ShapeDiver\GeometryApiV2\Client\Model\ResError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSessionDefaultsWithHttpInfo($sessionId, string $contentType = self::contentTypes['getSessionDefaults'][0])
    {
        $request = $this->getSessionDefaultsRequest($sessionId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ShapeDiver\GeometryApiV2\Client\Model\ResGetSessionDefaults' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ShapeDiver\GeometryApiV2\Client\Model\ResGetSessionDefaults' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ShapeDiver\GeometryApiV2\Client\Model\ResGetSessionDefaults', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ShapeDiver\GeometryApiV2\Client\Model\ResError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ShapeDiver\GeometryApiV2\Client\Model\ResError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ShapeDiver\GeometryApiV2\Client\Model\ResError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ShapeDiver\GeometryApiV2\Client\Model\ResGetSessionDefaults';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ShapeDiver\GeometryApiV2\Client\Model\ResGetSessionDefaults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ShapeDiver\GeometryApiV2\Client\Model\ResError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSessionDefaultsAsync
     *
     * Get session defaults (corresponds to the content of the session initialization request).
     *
     * @param  string $sessionId Session ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSessionDefaults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSessionDefaultsAsync($sessionId, string $contentType = self::contentTypes['getSessionDefaults'][0])
    {
        return $this->getSessionDefaultsAsyncWithHttpInfo($sessionId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSessionDefaultsAsyncWithHttpInfo
     *
     * Get session defaults (corresponds to the content of the session initialization request).
     *
     * @param  string $sessionId Session ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSessionDefaults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSessionDefaultsAsyncWithHttpInfo($sessionId, string $contentType = self::contentTypes['getSessionDefaults'][0])
    {
        $returnType = '\ShapeDiver\GeometryApiV2\Client\Model\ResGetSessionDefaults';
        $request = $this->getSessionDefaultsRequest($sessionId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSessionDefaults'
     *
     * @param  string $sessionId Session ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSessionDefaults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSessionDefaultsRequest($sessionId, string $contentType = self::contentTypes['getSessionDefaults'][0])
    {

        // verify the required parameter 'sessionId' is set
        if ($sessionId === null || (is_array($sessionId) && count($sessionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sessionId when calling getSessionDefaults'
            );
        }


        $resourcePath = '/api/v2/session/{sessionId}/default';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sessionId !== null) {
            $resourcePath = str_replace(
                '{' . 'sessionId' . '}',
                ObjectSerializer::toPathValue($sessionId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
