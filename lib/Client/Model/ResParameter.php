<?php
/**
 * ResParameter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ShapeDiver\GeometryApiV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Geometry Backend API v2
 *
 * The ShapeDiver Geometry Backend system is used to: * host Grasshopper models in a secure, reliable, scalable, and performant way, * run computations of Grasshopper models, * and cache and output the results of computations and exports.
 *
 * The version of the OpenAPI document: 1.8.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ShapeDiver\GeometryApiV2\Client\Model;

use \ArrayAccess;
use \ShapeDiver\GeometryApiV2\Client\ObjectSerializer;

/**
 * ResParameter Class Doc Comment
 *
 * @category Class
 * @description Definition of a parameter of a ShapeDiver Model.
 * @package  ShapeDiver\GeometryApiV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResParameter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResParameter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'choices' => 'string[]',
        'decimalplaces' => 'int',
        'defval' => 'string',
        'expression' => 'string',
        'format' => 'string[]',
        'min' => 'float',
        'max' => 'float',
        'umin' => 'float',
        'umax' => 'float',
        'vmin' => 'float',
        'vmax' => 'float',
        'interval' => 'float',
        'name' => 'string',
        'type' => '\ShapeDiver\GeometryApiV2\Client\Model\ResParameterType',
        'visualization' => '\ShapeDiver\GeometryApiV2\Client\Model\ResVisualizationType',
        'structure' => '\ShapeDiver\GeometryApiV2\Client\Model\ResStructureType',
        'group' => '\ShapeDiver\GeometryApiV2\Client\Model\ResParameterGroup',
        'hint' => 'string',
        'order' => 'int',
        'tooltip' => 'string',
        'displayname' => 'string',
        'hidden' => 'bool',
        'settings' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'choices' => null,
        'decimalplaces' => null,
        'defval' => null,
        'expression' => null,
        'format' => null,
        'min' => null,
        'max' => null,
        'umin' => null,
        'umax' => null,
        'vmin' => null,
        'vmax' => null,
        'interval' => null,
        'name' => null,
        'type' => null,
        'visualization' => null,
        'structure' => null,
        'group' => null,
        'hint' => null,
        'order' => null,
        'tooltip' => null,
        'displayname' => null,
        'hidden' => null,
        'settings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'choices' => false,
        'decimalplaces' => false,
        'defval' => false,
        'expression' => false,
        'format' => false,
        'min' => false,
        'max' => false,
        'umin' => false,
        'umax' => false,
        'vmin' => false,
        'vmax' => false,
        'interval' => false,
        'name' => false,
        'type' => false,
        'visualization' => false,
        'structure' => false,
        'group' => false,
        'hint' => false,
        'order' => false,
        'tooltip' => false,
        'displayname' => false,
        'hidden' => false,
        'settings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'choices' => 'choices',
        'decimalplaces' => 'decimalplaces',
        'defval' => 'defval',
        'expression' => 'expression',
        'format' => 'format',
        'min' => 'min',
        'max' => 'max',
        'umin' => 'umin',
        'umax' => 'umax',
        'vmin' => 'vmin',
        'vmax' => 'vmax',
        'interval' => 'interval',
        'name' => 'name',
        'type' => 'type',
        'visualization' => 'visualization',
        'structure' => 'structure',
        'group' => 'group',
        'hint' => 'hint',
        'order' => 'order',
        'tooltip' => 'tooltip',
        'displayname' => 'displayname',
        'hidden' => 'hidden',
        'settings' => 'settings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'choices' => 'setChoices',
        'decimalplaces' => 'setDecimalplaces',
        'defval' => 'setDefval',
        'expression' => 'setExpression',
        'format' => 'setFormat',
        'min' => 'setMin',
        'max' => 'setMax',
        'umin' => 'setUmin',
        'umax' => 'setUmax',
        'vmin' => 'setVmin',
        'vmax' => 'setVmax',
        'interval' => 'setInterval',
        'name' => 'setName',
        'type' => 'setType',
        'visualization' => 'setVisualization',
        'structure' => 'setStructure',
        'group' => 'setGroup',
        'hint' => 'setHint',
        'order' => 'setOrder',
        'tooltip' => 'setTooltip',
        'displayname' => 'setDisplayname',
        'hidden' => 'setHidden',
        'settings' => 'setSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'choices' => 'getChoices',
        'decimalplaces' => 'getDecimalplaces',
        'defval' => 'getDefval',
        'expression' => 'getExpression',
        'format' => 'getFormat',
        'min' => 'getMin',
        'max' => 'getMax',
        'umin' => 'getUmin',
        'umax' => 'getUmax',
        'vmin' => 'getVmin',
        'vmax' => 'getVmax',
        'interval' => 'getInterval',
        'name' => 'getName',
        'type' => 'getType',
        'visualization' => 'getVisualization',
        'structure' => 'getStructure',
        'group' => 'getGroup',
        'hint' => 'getHint',
        'order' => 'getOrder',
        'tooltip' => 'getTooltip',
        'displayname' => 'getDisplayname',
        'hidden' => 'getHidden',
        'settings' => 'getSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('choices', $data ?? [], null);
        $this->setIfExists('decimalplaces', $data ?? [], null);
        $this->setIfExists('defval', $data ?? [], null);
        $this->setIfExists('expression', $data ?? [], null);
        $this->setIfExists('format', $data ?? [], null);
        $this->setIfExists('min', $data ?? [], null);
        $this->setIfExists('max', $data ?? [], null);
        $this->setIfExists('umin', $data ?? [], null);
        $this->setIfExists('umax', $data ?? [], null);
        $this->setIfExists('vmin', $data ?? [], null);
        $this->setIfExists('vmax', $data ?? [], null);
        $this->setIfExists('interval', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('visualization', $data ?? [], null);
        $this->setIfExists('structure', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('hint', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('tooltip', $data ?? [], null);
        $this->setIfExists('displayname', $data ?? [], null);
        $this->setIfExists('hidden', $data ?? [], null);
        $this->setIfExists('settings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!is_null($this->container['decimalplaces']) && ($this->container['decimalplaces'] < 0)) {
            $invalidProperties[] = "invalid value for 'decimalplaces', must be bigger than or equal to 0.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['hidden'] === null) {
            $invalidProperties[] = "'hidden' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique ID of parameter, stays constant each time a model gets uploaded.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets choices
     *
     * @return string[]|null
     */
    public function getChoices()
    {
        return $this->container['choices'];
    }

    /**
     * Sets choices
     *
     * @param string[]|null $choices Choice of parameter values for types `STRINGLIST`.
     *
     * @return self
     */
    public function setChoices($choices)
    {
        if (is_null($choices)) {
            throw new \InvalidArgumentException('non-nullable choices cannot be null');
        }
        $this->container['choices'] = $choices;

        return $this;
    }

    /**
     * Gets decimalplaces
     *
     * @return int|null
     */
    public function getDecimalplaces()
    {
        return $this->container['decimalplaces'];
    }

    /**
     * Sets decimalplaces
     *
     * @param int|null $decimalplaces Number of decimal places for numeric types.
     *
     * @return self
     */
    public function setDecimalplaces($decimalplaces)
    {
        if (is_null($decimalplaces)) {
            throw new \InvalidArgumentException('non-nullable decimalplaces cannot be null');
        }

        if (($decimalplaces < 0)) {
            throw new \InvalidArgumentException('invalid value for $decimalplaces when calling ResParameter., must be bigger than or equal to 0.');
        }

        $this->container['decimalplaces'] = $decimalplaces;

        return $this;
    }

    /**
     * Gets defval
     *
     * @return string|null
     */
    public function getDefval()
    {
        return $this->container['defval'];
    }

    /**
     * Sets defval
     *
     * @param string|null $defval Default value of parameter, stringified.
     *
     * @return self
     */
    public function setDefval($defval)
    {
        if (is_null($defval)) {
            throw new \InvalidArgumentException('non-nullable defval cannot be null');
        }
        $this->container['defval'] = $defval;

        return $this;
    }

    /**
     * Gets expression
     *
     * @return string|null
     */
    public function getExpression()
    {
        return $this->container['expression'];
    }

    /**
     * Sets expression
     *
     * @param string|null $expression Optional expression to be applied to value for visualisation.
     *
     * @return self
     */
    public function setExpression($expression)
    {
        if (is_null($expression)) {
            throw new \InvalidArgumentException('non-nullable expression cannot be null');
        }
        $this->container['expression'] = $expression;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string[]|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string[]|null $format List of file formats (content types) supported, used for type `FILE`.
     *
     * @return self
     */
    public function setFormat($format)
    {
        if (is_null($format)) {
            throw new \InvalidArgumentException('non-nullable format cannot be null');
        }
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets min
     *
     * @return float|null
     */
    public function getMin()
    {
        return $this->container['min'];
    }

    /**
     * Sets min
     *
     * @param float|null $min Minimum value (stringified) for numeric types.
     *
     * @return self
     */
    public function setMin($min)
    {
        if (is_null($min)) {
            throw new \InvalidArgumentException('non-nullable min cannot be null');
        }
        $this->container['min'] = $min;

        return $this;
    }

    /**
     * Gets max
     *
     * @return float|null
     */
    public function getMax()
    {
        return $this->container['max'];
    }

    /**
     * Sets max
     *
     * @param float|null $max Maximum: * value (stringified) for numeric types. * string length for type `STRING`. * file size allowed (stringified) for type FILE.
     *
     * @return self
     */
    public function setMax($max)
    {
        if (is_null($max)) {
            throw new \InvalidArgumentException('non-nullable max cannot be null');
        }
        $this->container['max'] = $max;

        return $this;
    }

    /**
     * Gets umin
     *
     * @return float|null
     */
    public function getUmin()
    {
        return $this->container['umin'];
    }

    /**
     * Sets umin
     *
     * @param float|null $umin Minimum `u` value for two dimensional domain parameters.
     *
     * @return self
     */
    public function setUmin($umin)
    {
        if (is_null($umin)) {
            throw new \InvalidArgumentException('non-nullable umin cannot be null');
        }
        $this->container['umin'] = $umin;

        return $this;
    }

    /**
     * Gets umax
     *
     * @return float|null
     */
    public function getUmax()
    {
        return $this->container['umax'];
    }

    /**
     * Sets umax
     *
     * @param float|null $umax Maximum `u` value for two dimensional domain parameters.
     *
     * @return self
     */
    public function setUmax($umax)
    {
        if (is_null($umax)) {
            throw new \InvalidArgumentException('non-nullable umax cannot be null');
        }
        $this->container['umax'] = $umax;

        return $this;
    }

    /**
     * Gets vmin
     *
     * @return float|null
     */
    public function getVmin()
    {
        return $this->container['vmin'];
    }

    /**
     * Sets vmin
     *
     * @param float|null $vmin Minimum `v` value for two dimensional domain parameters.
     *
     * @return self
     */
    public function setVmin($vmin)
    {
        if (is_null($vmin)) {
            throw new \InvalidArgumentException('non-nullable vmin cannot be null');
        }
        $this->container['vmin'] = $vmin;

        return $this;
    }

    /**
     * Gets vmax
     *
     * @return float|null
     */
    public function getVmax()
    {
        return $this->container['vmax'];
    }

    /**
     * Sets vmax
     *
     * @param float|null $vmax Maximum `v` value for two dimensional domain parameters.
     *
     * @return self
     */
    public function setVmax($vmax)
    {
        if (is_null($vmax)) {
            throw new \InvalidArgumentException('non-nullable vmax cannot be null');
        }
        $this->container['vmax'] = $vmax;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return float|null
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param float|null $interval Step size used for domain parameters.
     *
     * @return self
     */
    public function setInterval($interval)
    {
        if (is_null($interval)) {
            throw new \InvalidArgumentException('non-nullable interval cannot be null');
        }
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the parameter.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \ShapeDiver\GeometryApiV2\Client\Model\ResParameterType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \ShapeDiver\GeometryApiV2\Client\Model\ResParameterType $type Type of parameter.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets visualization
     *
     * @return \ShapeDiver\GeometryApiV2\Client\Model\ResVisualizationType|null
     */
    public function getVisualization()
    {
        return $this->container['visualization'];
    }

    /**
     * Sets visualization
     *
     * @param \ShapeDiver\GeometryApiV2\Client\Model\ResVisualizationType|null $visualization Optional preferred visualization for parameters of type `FILE` and `STRINGLIST`.
     *
     * @return self
     */
    public function setVisualization($visualization)
    {
        if (is_null($visualization)) {
            throw new \InvalidArgumentException('non-nullable visualization cannot be null');
        }
        $this->container['visualization'] = $visualization;

        return $this;
    }

    /**
     * Gets structure
     *
     * @return \ShapeDiver\GeometryApiV2\Client\Model\ResStructureType|null
     */
    public function getStructure()
    {
        return $this->container['structure'];
    }

    /**
     * Sets structure
     *
     * @param \ShapeDiver\GeometryApiV2\Client\Model\ResStructureType|null $structure Structure of a parameter.
     *
     * @return self
     */
    public function setStructure($structure)
    {
        if (is_null($structure)) {
            throw new \InvalidArgumentException('non-nullable structure cannot be null');
        }
        $this->container['structure'] = $structure;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \ShapeDiver\GeometryApiV2\Client\Model\ResParameterGroup|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \ShapeDiver\GeometryApiV2\Client\Model\ResParameterGroup|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets hint
     *
     * @return string|null
     */
    public function getHint()
    {
        return $this->container['hint'];
    }

    /**
     * Sets hint
     *
     * @param string|null $hint Technical hint for the UI implementation.
     *
     * @return self
     */
    public function setHint($hint)
    {
        if (is_null($hint)) {
            throw new \InvalidArgumentException('non-nullable hint cannot be null');
        }
        $this->container['hint'] = $hint;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order Ordering of the parameter in client applications.
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets tooltip
     *
     * @return string|null
     */
    public function getTooltip()
    {
        return $this->container['tooltip'];
    }

    /**
     * Sets tooltip
     *
     * @param string|null $tooltip Description that is shown as a tooltip in the clients.
     *
     * @return self
     */
    public function setTooltip($tooltip)
    {
        if (is_null($tooltip)) {
            throw new \InvalidArgumentException('non-nullable tooltip cannot be null');
        }
        $this->container['tooltip'] = $tooltip;

        return $this;
    }

    /**
     * Gets displayname
     *
     * @return string|null
     */
    public function getDisplayname()
    {
        return $this->container['displayname'];
    }

    /**
     * Sets displayname
     *
     * @param string|null $displayname Parameter name to display instead of `name`.
     *
     * @return self
     */
    public function setDisplayname($displayname)
    {
        if (is_null($displayname)) {
            throw new \InvalidArgumentException('non-nullable displayname cannot be null');
        }
        $this->container['displayname'] = $displayname;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden Controls whether the parameter should be hidden in the UI.
     *
     * @return self
     */
    public function setHidden($hidden)
    {
        if (is_null($hidden)) {
            throw new \InvalidArgumentException('non-nullable hidden cannot be null');
        }
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return object|null
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param object|null $settings Holds parameter-type specific information.
     *
     * @return self
     */
    public function setSettings($settings)
    {
        if (is_null($settings)) {
            throw new \InvalidArgumentException('non-nullable settings cannot be null');
        }
        $this->container['settings'] = $settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


