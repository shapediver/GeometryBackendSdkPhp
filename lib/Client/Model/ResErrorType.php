<?php
/**
 * ResErrorType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ShapeDiver\GeometryApiV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Geometry Backend API v2
 *
 * The ShapeDiver Geometry Backend system is used to: * host Grasshopper models in a secure, reliable, scalable, and performant way, * run computations of Grasshopper models, * and cache and output the results of computations and exports.
 *
 * The version of the OpenAPI document: 1.9.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ShapeDiver\GeometryApiV2\Client\Model;
use \ShapeDiver\GeometryApiV2\Client\ObjectSerializer;

/**
 * ResErrorType Class Doc Comment
 *
 * @category Class
 * @description Possible error types.
 * @package  ShapeDiver\GeometryApiV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ResErrorType
{
    /**
     * Possible values of this enum
     */
    public const ASSERTION_ERROR = 'SdAssertionError';

    public const CACHE_ERROR_GENERIC = 'SdCacheErrorGeneric';

    public const CONNECTOR_ERROR = 'SdConnectorError';

    public const DATABASE_ERROR_GENERIC = 'SdDatabaseErrorGeneric';

    public const EMAILING_ERROR = 'SdEmailingError';

    public const ERROR_ENTITY_NOT_FOUND = 'SdErrorEntityNotFound';

    public const ERROR_FORBIDDEN = 'SdErrorForbidden';

    public const ERROR_GENERIC_CLIENT = 'SdErrorGenericClient';

    public const ERROR_GENERIC_INTERNAL = 'SdErrorGenericInternal';

    public const ERROR_UNAUTHORIZED = 'SdErrorUnauthorized';

    public const ILLEGAL_ARGUMENT_ERROR = 'SdIllegalArgumentError';

    public const JWT_VALIDATION_ERROR = 'SdJwtValidationError';

    public const METHOD_NOT_ALLOWED_ERROR = 'SdMethodNotAllowedError';

    public const MODEL_VALIDATION_ERROR = 'SdModelValidationError';

    public const NOT_ACCEPTABLE = 'SdNotAcceptable';

    public const NOT_FOUND_ERROR = 'SdNotFoundError';

    public const PARAMETER_VALIDATION_ERROR = 'SdParameterValidationError';

    public const RATE_LIMIT_ERROR_GENERIC = 'SdRateLimitErrorGeneric';

    public const REQUEST_TIMEOUT = 'SdRequestTimeout';

    public const REQUEST_VALIDATION_ERROR = 'SdRequestValidationError';

    public const RESOURCE_GONE_ERROR = 'SdResourceGoneError';

    public const SESSION_GONE_ERROR = 'SdSessionGoneError';

    public const SESSION_VALIDATION_ERROR = 'SdSessionValidationError';

    public const STORAGE_ERROR_GENERIC = 'SdStorageErrorGeneric';

    public const TEXTURE_URL_ERROR = 'SdTextureUrlError';

    public const TICKET_VALIDATION_ERROR = 'SdTicketValidationError';

    public const TOKEN_MISSING_ERROR = 'SdTokenMissingError';

    public const TRANSFORM_CONTENT_ARRAY_ERROR = 'SdTransformContentArrayError';

    public const UNCONFIRMED_MODEL_ERROR = 'SdUnconfirmedModelError';

    public const UNKNOWN = '';

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::ASSERTION_ERROR,
            self::CACHE_ERROR_GENERIC,
            self::CONNECTOR_ERROR,
            self::DATABASE_ERROR_GENERIC,
            self::EMAILING_ERROR,
            self::ERROR_ENTITY_NOT_FOUND,
            self::ERROR_FORBIDDEN,
            self::ERROR_GENERIC_CLIENT,
            self::ERROR_GENERIC_INTERNAL,
            self::ERROR_UNAUTHORIZED,
            self::ILLEGAL_ARGUMENT_ERROR,
            self::JWT_VALIDATION_ERROR,
            self::METHOD_NOT_ALLOWED_ERROR,
            self::MODEL_VALIDATION_ERROR,
            self::NOT_ACCEPTABLE,
            self::NOT_FOUND_ERROR,
            self::PARAMETER_VALIDATION_ERROR,
            self::RATE_LIMIT_ERROR_GENERIC,
            self::REQUEST_TIMEOUT,
            self::REQUEST_VALIDATION_ERROR,
            self::RESOURCE_GONE_ERROR,
            self::SESSION_GONE_ERROR,
            self::SESSION_VALIDATION_ERROR,
            self::STORAGE_ERROR_GENERIC,
            self::TEXTURE_URL_ERROR,
            self::TICKET_VALIDATION_ERROR,
            self::TOKEN_MISSING_ERROR,
            self::TRANSFORM_CONTENT_ARRAY_ERROR,
            self::UNCONFIRMED_MODEL_ERROR,
            self::UNKNOWN
        ];
    }
}


