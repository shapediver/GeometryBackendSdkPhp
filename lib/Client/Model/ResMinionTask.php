<?php
/**
 * ResMinionTask
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ShapeDiver\GeometryApiV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Geometry Backend API v2
 *
 * The ShapeDiver Geometry Backend system is used to: * host Grasshopper models in a secure, reliable, scalable, and performant way, * run computations of Grasshopper models, * and cache and output the results of computations and exports.
 *
 * The version of the OpenAPI document: 2.13.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ShapeDiver\GeometryApiV2\Client\Model;

use \ArrayAccess;
use \ShapeDiver\GeometryApiV2\Client\ObjectSerializer;

/**
 * ResMinionTask Class Doc Comment
 *
 * @category Class
 * @description Statistics of a single Minion task.
 * @package  ShapeDiver\GeometryApiV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResMinionTask implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResMinionTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'avgDuration' => 'int',
        'maxDuration' => 'int',
        'avgIntervalDiff' => 'int',
        'maxIntervalDiff' => 'int',
        'interval' => 'int',
        'latest' => 'string',
        'count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'avgDuration' => null,
        'maxDuration' => null,
        'avgIntervalDiff' => null,
        'maxIntervalDiff' => null,
        'interval' => null,
        'latest' => null,
        'count' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'avgDuration' => false,
        'maxDuration' => false,
        'avgIntervalDiff' => false,
        'maxIntervalDiff' => false,
        'interval' => false,
        'latest' => false,
        'count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'avgDuration' => 'avgDuration',
        'maxDuration' => 'maxDuration',
        'avgIntervalDiff' => 'avgIntervalDiff',
        'maxIntervalDiff' => 'maxIntervalDiff',
        'interval' => 'interval',
        'latest' => 'latest',
        'count' => 'count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'avgDuration' => 'setAvgDuration',
        'maxDuration' => 'setMaxDuration',
        'avgIntervalDiff' => 'setAvgIntervalDiff',
        'maxIntervalDiff' => 'setMaxIntervalDiff',
        'interval' => 'setInterval',
        'latest' => 'setLatest',
        'count' => 'setCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'avgDuration' => 'getAvgDuration',
        'maxDuration' => 'getMaxDuration',
        'avgIntervalDiff' => 'getAvgIntervalDiff',
        'maxIntervalDiff' => 'getMaxIntervalDiff',
        'interval' => 'getInterval',
        'latest' => 'getLatest',
        'count' => 'getCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('avgDuration', $data ?? [], null);
        $this->setIfExists('maxDuration', $data ?? [], null);
        $this->setIfExists('avgIntervalDiff', $data ?? [], null);
        $this->setIfExists('maxIntervalDiff', $data ?? [], null);
        $this->setIfExists('interval', $data ?? [], null);
        $this->setIfExists('latest', $data ?? [], null);
        $this->setIfExists('count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['avgDuration'] === null) {
            $invalidProperties[] = "'avgDuration' can't be null";
        }
        if (($this->container['avgDuration'] < 0)) {
            $invalidProperties[] = "invalid value for 'avgDuration', must be bigger than or equal to 0.";
        }

        if ($this->container['maxDuration'] === null) {
            $invalidProperties[] = "'maxDuration' can't be null";
        }
        if (($this->container['maxDuration'] < 0)) {
            $invalidProperties[] = "invalid value for 'maxDuration', must be bigger than or equal to 0.";
        }

        if ($this->container['avgIntervalDiff'] === null) {
            $invalidProperties[] = "'avgIntervalDiff' can't be null";
        }
        if (($this->container['avgIntervalDiff'] < 0)) {
            $invalidProperties[] = "invalid value for 'avgIntervalDiff', must be bigger than or equal to 0.";
        }

        if ($this->container['maxIntervalDiff'] === null) {
            $invalidProperties[] = "'maxIntervalDiff' can't be null";
        }
        if (($this->container['maxIntervalDiff'] < 0)) {
            $invalidProperties[] = "invalid value for 'maxIntervalDiff', must be bigger than or equal to 0.";
        }

        if ($this->container['interval'] === null) {
            $invalidProperties[] = "'interval' can't be null";
        }
        if (($this->container['interval'] < 0)) {
            $invalidProperties[] = "invalid value for 'interval', must be bigger than or equal to 0.";
        }

        if ($this->container['latest'] === null) {
            $invalidProperties[] = "'latest' can't be null";
        }
        if (!preg_match("/^\\d{17}$/", $this->container['latest'])) {
            $invalidProperties[] = "invalid value for 'latest', must be conform to the pattern /^\\d{17}$/.";
        }

        if ($this->container['count'] === null) {
            $invalidProperties[] = "'count' can't be null";
        }
        if (($this->container['count'] < 0)) {
            $invalidProperties[] = "invalid value for 'count', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets avgDuration
     *
     * @return int
     */
    public function getAvgDuration()
    {
        return $this->container['avgDuration'];
    }

    /**
     * Sets avgDuration
     *
     * @param int $avgDuration Average duration of the task in milliseconds.
     *
     * @return self
     */
    public function setAvgDuration($avgDuration)
    {
        if (is_null($avgDuration)) {
            throw new \InvalidArgumentException('non-nullable avgDuration cannot be null');
        }

        if (($avgDuration < 0)) {
            throw new \InvalidArgumentException('invalid value for $avgDuration when calling ResMinionTask., must be bigger than or equal to 0.');
        }

        $this->container['avgDuration'] = $avgDuration;

        return $this;
    }

    /**
     * Gets maxDuration
     *
     * @return int
     */
    public function getMaxDuration()
    {
        return $this->container['maxDuration'];
    }

    /**
     * Sets maxDuration
     *
     * @param int $maxDuration Maximum duration of the task in milliseconds.
     *
     * @return self
     */
    public function setMaxDuration($maxDuration)
    {
        if (is_null($maxDuration)) {
            throw new \InvalidArgumentException('non-nullable maxDuration cannot be null');
        }

        if (($maxDuration < 0)) {
            throw new \InvalidArgumentException('invalid value for $maxDuration when calling ResMinionTask., must be bigger than or equal to 0.');
        }

        $this->container['maxDuration'] = $maxDuration;

        return $this;
    }

    /**
     * Gets avgIntervalDiff
     *
     * @return int
     */
    public function getAvgIntervalDiff()
    {
        return $this->container['avgIntervalDiff'];
    }

    /**
     * Sets avgIntervalDiff
     *
     * @param int $avgIntervalDiff Average difference between the configured task interval and the last global task execution in milliseconds.
     *
     * @return self
     */
    public function setAvgIntervalDiff($avgIntervalDiff)
    {
        if (is_null($avgIntervalDiff)) {
            throw new \InvalidArgumentException('non-nullable avgIntervalDiff cannot be null');
        }

        if (($avgIntervalDiff < 0)) {
            throw new \InvalidArgumentException('invalid value for $avgIntervalDiff when calling ResMinionTask., must be bigger than or equal to 0.');
        }

        $this->container['avgIntervalDiff'] = $avgIntervalDiff;

        return $this;
    }

    /**
     * Gets maxIntervalDiff
     *
     * @return int
     */
    public function getMaxIntervalDiff()
    {
        return $this->container['maxIntervalDiff'];
    }

    /**
     * Sets maxIntervalDiff
     *
     * @param int $maxIntervalDiff Maximum difference between the configured task interval and the last global task execution in milliseconds.
     *
     * @return self
     */
    public function setMaxIntervalDiff($maxIntervalDiff)
    {
        if (is_null($maxIntervalDiff)) {
            throw new \InvalidArgumentException('non-nullable maxIntervalDiff cannot be null');
        }

        if (($maxIntervalDiff < 0)) {
            throw new \InvalidArgumentException('invalid value for $maxIntervalDiff when calling ResMinionTask., must be bigger than or equal to 0.');
        }

        $this->container['maxIntervalDiff'] = $maxIntervalDiff;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int $interval Execution interval of this task type in milliseconds.
     *
     * @return self
     */
    public function setInterval($interval)
    {
        if (is_null($interval)) {
            throw new \InvalidArgumentException('non-nullable interval cannot be null');
        }

        if (($interval < 0)) {
            throw new \InvalidArgumentException('invalid value for $interval when calling ResMinionTask., must be bigger than or equal to 0.');
        }

        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets latest
     *
     * @return string
     */
    public function getLatest()
    {
        return $this->container['latest'];
    }

    /**
     * Sets latest
     *
     * @param string $latest Timestamp of the latest task completion.
     *
     * @return self
     */
    public function setLatest($latest)
    {
        if (is_null($latest)) {
            throw new \InvalidArgumentException('non-nullable latest cannot be null');
        }

        if ((!preg_match("/^\\d{17}$/", ObjectSerializer::toString($latest)))) {
            throw new \InvalidArgumentException("invalid value for \$latest when calling ResMinionTask., must conform to the pattern /^\\d{17}$/.");
        }

        $this->container['latest'] = $latest;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count The number of aggregated items.
     *
     * @return self
     */
    public function setCount($count)
    {
        if (is_null($count)) {
            throw new \InvalidArgumentException('non-nullable count cannot be null');
        }

        if (($count < 0)) {
            throw new \InvalidArgumentException('invalid value for $count when calling ResMinionTask., must be bigger than or equal to 0.');
        }

        $this->container['count'] = $count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


