<?php
/**
 * ResModelComputationStats
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ShapeDiver\GeometryApiV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Geometry Backend API v2
 *
 * The ShapeDiver Geometry Backend system is used to: * host Grasshopper models in a secure, reliable, scalable, and performant way, * run computations of Grasshopper models, * and cache and output the results of computations and exports.
 *
 * The version of the OpenAPI document: 1.10.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ShapeDiver\GeometryApiV2\Client\Model;

use \ArrayAccess;
use \ShapeDiver\GeometryApiV2\Client\ObjectSerializer;

/**
 * ResModelComputationStats Class Doc Comment
 *
 * @category Class
 * @description Stats of a computation request.
 * @package  ShapeDiver\GeometryApiV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResModelComputationStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResModelComputationStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sizeAssets' => 'int',
        'sizeAssetsStorage' => 'int',
        'timeCompletion' => 'int',
        'timeModelDownload' => 'int',
        'timeModelOpen' => 'int',
        'timeProcessing' => 'int',
        'timeCheckStored' => 'int',
        'timeCheckLoaded' => 'int',
        'timeStorage' => 'int',
        'timeSolver' => 'int',
        'timeSolverCollect' => 'int',
        'timeSolverExt' => 'int',
        'timeWait' => 'int',
        'timeCacheOutputs' => 'int',
        'model' => '\ShapeDiver\GeometryApiV2\Client\Model\ResComputationComponents',
        'cpuTimeCheckStored' => 'int',
        'cpuTimeCheckLoaded' => 'int',
        'cpuTimeStorage' => 'int',
        'cpuTimeModelDownload' => 'int',
        'cpuTimeModelOpen' => 'int',
        'cpuTimeSolver' => 'int',
        'cpuTimeSolverCollect' => 'int',
        'cpuTimeSolverExt' => 'int',
        'cpuTimeCacheOutputs' => 'int',
        'timeModelPrepare' => 'int',
        'cpuTimeModelPrepare' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sizeAssets' => null,
        'sizeAssetsStorage' => null,
        'timeCompletion' => null,
        'timeModelDownload' => null,
        'timeModelOpen' => null,
        'timeProcessing' => null,
        'timeCheckStored' => null,
        'timeCheckLoaded' => null,
        'timeStorage' => null,
        'timeSolver' => null,
        'timeSolverCollect' => null,
        'timeSolverExt' => null,
        'timeWait' => null,
        'timeCacheOutputs' => null,
        'model' => null,
        'cpuTimeCheckStored' => null,
        'cpuTimeCheckLoaded' => null,
        'cpuTimeStorage' => null,
        'cpuTimeModelDownload' => null,
        'cpuTimeModelOpen' => null,
        'cpuTimeSolver' => null,
        'cpuTimeSolverCollect' => null,
        'cpuTimeSolverExt' => null,
        'cpuTimeCacheOutputs' => null,
        'timeModelPrepare' => null,
        'cpuTimeModelPrepare' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sizeAssets' => false,
        'sizeAssetsStorage' => false,
        'timeCompletion' => false,
        'timeModelDownload' => false,
        'timeModelOpen' => false,
        'timeProcessing' => false,
        'timeCheckStored' => false,
        'timeCheckLoaded' => false,
        'timeStorage' => false,
        'timeSolver' => false,
        'timeSolverCollect' => false,
        'timeSolverExt' => false,
        'timeWait' => false,
        'timeCacheOutputs' => false,
        'model' => false,
        'cpuTimeCheckStored' => false,
        'cpuTimeCheckLoaded' => false,
        'cpuTimeStorage' => false,
        'cpuTimeModelDownload' => false,
        'cpuTimeModelOpen' => false,
        'cpuTimeSolver' => false,
        'cpuTimeSolverCollect' => false,
        'cpuTimeSolverExt' => false,
        'cpuTimeCacheOutputs' => false,
        'timeModelPrepare' => false,
        'cpuTimeModelPrepare' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sizeAssets' => 'size_assets',
        'sizeAssetsStorage' => 'size_assets_storage',
        'timeCompletion' => 'time_completion',
        'timeModelDownload' => 'time_model_download',
        'timeModelOpen' => 'time_model_open',
        'timeProcessing' => 'time_processing',
        'timeCheckStored' => 'time_check_stored',
        'timeCheckLoaded' => 'time_check_loaded',
        'timeStorage' => 'time_storage',
        'timeSolver' => 'time_solver',
        'timeSolverCollect' => 'time_solver_collect',
        'timeSolverExt' => 'time_solver_ext',
        'timeWait' => 'time_wait',
        'timeCacheOutputs' => 'time_cache_outputs',
        'model' => 'model',
        'cpuTimeCheckStored' => 'cpu_time_check_stored',
        'cpuTimeCheckLoaded' => 'cpu_time_check_loaded',
        'cpuTimeStorage' => 'cpu_time_storage',
        'cpuTimeModelDownload' => 'cpu_time_model_download',
        'cpuTimeModelOpen' => 'cpu_time_model_open',
        'cpuTimeSolver' => 'cpu_time_solver',
        'cpuTimeSolverCollect' => 'cpu_time_solver_collect',
        'cpuTimeSolverExt' => 'cpu_time_solver_ext',
        'cpuTimeCacheOutputs' => 'cpu_time_cache_outputs',
        'timeModelPrepare' => 'time_model_prepare',
        'cpuTimeModelPrepare' => 'cpu_time_model_prepare'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sizeAssets' => 'setSizeAssets',
        'sizeAssetsStorage' => 'setSizeAssetsStorage',
        'timeCompletion' => 'setTimeCompletion',
        'timeModelDownload' => 'setTimeModelDownload',
        'timeModelOpen' => 'setTimeModelOpen',
        'timeProcessing' => 'setTimeProcessing',
        'timeCheckStored' => 'setTimeCheckStored',
        'timeCheckLoaded' => 'setTimeCheckLoaded',
        'timeStorage' => 'setTimeStorage',
        'timeSolver' => 'setTimeSolver',
        'timeSolverCollect' => 'setTimeSolverCollect',
        'timeSolverExt' => 'setTimeSolverExt',
        'timeWait' => 'setTimeWait',
        'timeCacheOutputs' => 'setTimeCacheOutputs',
        'model' => 'setModel',
        'cpuTimeCheckStored' => 'setCpuTimeCheckStored',
        'cpuTimeCheckLoaded' => 'setCpuTimeCheckLoaded',
        'cpuTimeStorage' => 'setCpuTimeStorage',
        'cpuTimeModelDownload' => 'setCpuTimeModelDownload',
        'cpuTimeModelOpen' => 'setCpuTimeModelOpen',
        'cpuTimeSolver' => 'setCpuTimeSolver',
        'cpuTimeSolverCollect' => 'setCpuTimeSolverCollect',
        'cpuTimeSolverExt' => 'setCpuTimeSolverExt',
        'cpuTimeCacheOutputs' => 'setCpuTimeCacheOutputs',
        'timeModelPrepare' => 'setTimeModelPrepare',
        'cpuTimeModelPrepare' => 'setCpuTimeModelPrepare'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sizeAssets' => 'getSizeAssets',
        'sizeAssetsStorage' => 'getSizeAssetsStorage',
        'timeCompletion' => 'getTimeCompletion',
        'timeModelDownload' => 'getTimeModelDownload',
        'timeModelOpen' => 'getTimeModelOpen',
        'timeProcessing' => 'getTimeProcessing',
        'timeCheckStored' => 'getTimeCheckStored',
        'timeCheckLoaded' => 'getTimeCheckLoaded',
        'timeStorage' => 'getTimeStorage',
        'timeSolver' => 'getTimeSolver',
        'timeSolverCollect' => 'getTimeSolverCollect',
        'timeSolverExt' => 'getTimeSolverExt',
        'timeWait' => 'getTimeWait',
        'timeCacheOutputs' => 'getTimeCacheOutputs',
        'model' => 'getModel',
        'cpuTimeCheckStored' => 'getCpuTimeCheckStored',
        'cpuTimeCheckLoaded' => 'getCpuTimeCheckLoaded',
        'cpuTimeStorage' => 'getCpuTimeStorage',
        'cpuTimeModelDownload' => 'getCpuTimeModelDownload',
        'cpuTimeModelOpen' => 'getCpuTimeModelOpen',
        'cpuTimeSolver' => 'getCpuTimeSolver',
        'cpuTimeSolverCollect' => 'getCpuTimeSolverCollect',
        'cpuTimeSolverExt' => 'getCpuTimeSolverExt',
        'cpuTimeCacheOutputs' => 'getCpuTimeCacheOutputs',
        'timeModelPrepare' => 'getTimeModelPrepare',
        'cpuTimeModelPrepare' => 'getCpuTimeModelPrepare'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('sizeAssets', $data ?? [], null);
        $this->setIfExists('sizeAssetsStorage', $data ?? [], null);
        $this->setIfExists('timeCompletion', $data ?? [], null);
        $this->setIfExists('timeModelDownload', $data ?? [], null);
        $this->setIfExists('timeModelOpen', $data ?? [], null);
        $this->setIfExists('timeProcessing', $data ?? [], null);
        $this->setIfExists('timeCheckStored', $data ?? [], null);
        $this->setIfExists('timeCheckLoaded', $data ?? [], null);
        $this->setIfExists('timeStorage', $data ?? [], null);
        $this->setIfExists('timeSolver', $data ?? [], null);
        $this->setIfExists('timeSolverCollect', $data ?? [], null);
        $this->setIfExists('timeSolverExt', $data ?? [], null);
        $this->setIfExists('timeWait', $data ?? [], null);
        $this->setIfExists('timeCacheOutputs', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('cpuTimeCheckStored', $data ?? [], null);
        $this->setIfExists('cpuTimeCheckLoaded', $data ?? [], null);
        $this->setIfExists('cpuTimeStorage', $data ?? [], null);
        $this->setIfExists('cpuTimeModelDownload', $data ?? [], null);
        $this->setIfExists('cpuTimeModelOpen', $data ?? [], null);
        $this->setIfExists('cpuTimeSolver', $data ?? [], null);
        $this->setIfExists('cpuTimeSolverCollect', $data ?? [], null);
        $this->setIfExists('cpuTimeSolverExt', $data ?? [], null);
        $this->setIfExists('cpuTimeCacheOutputs', $data ?? [], null);
        $this->setIfExists('timeModelPrepare', $data ?? [], null);
        $this->setIfExists('cpuTimeModelPrepare', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sizeAssets']) && ($this->container['sizeAssets'] < 0)) {
            $invalidProperties[] = "invalid value for 'sizeAssets', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sizeAssetsStorage']) && ($this->container['sizeAssetsStorage'] < 0)) {
            $invalidProperties[] = "invalid value for 'sizeAssetsStorage', must be bigger than or equal to 0.";
        }

        if ($this->container['timeCompletion'] === null) {
            $invalidProperties[] = "'timeCompletion' can't be null";
        }
        if (($this->container['timeCompletion'] < 0)) {
            $invalidProperties[] = "invalid value for 'timeCompletion', must be bigger than or equal to 0.";
        }

        if ($this->container['timeModelDownload'] === null) {
            $invalidProperties[] = "'timeModelDownload' can't be null";
        }
        if (($this->container['timeModelDownload'] < 0)) {
            $invalidProperties[] = "invalid value for 'timeModelDownload', must be bigger than or equal to 0.";
        }

        if ($this->container['timeModelOpen'] === null) {
            $invalidProperties[] = "'timeModelOpen' can't be null";
        }
        if (($this->container['timeModelOpen'] < 0)) {
            $invalidProperties[] = "invalid value for 'timeModelOpen', must be bigger than or equal to 0.";
        }

        if ($this->container['timeProcessing'] === null) {
            $invalidProperties[] = "'timeProcessing' can't be null";
        }
        if (($this->container['timeProcessing'] < 0)) {
            $invalidProperties[] = "invalid value for 'timeProcessing', must be bigger than or equal to 0.";
        }

        if ($this->container['timeCheckStored'] === null) {
            $invalidProperties[] = "'timeCheckStored' can't be null";
        }
        if (($this->container['timeCheckStored'] < 0)) {
            $invalidProperties[] = "invalid value for 'timeCheckStored', must be bigger than or equal to 0.";
        }

        if ($this->container['timeCheckLoaded'] === null) {
            $invalidProperties[] = "'timeCheckLoaded' can't be null";
        }
        if (($this->container['timeCheckLoaded'] < 0)) {
            $invalidProperties[] = "invalid value for 'timeCheckLoaded', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['timeStorage']) && ($this->container['timeStorage'] < 0)) {
            $invalidProperties[] = "invalid value for 'timeStorage', must be bigger than or equal to 0.";
        }

        if ($this->container['timeSolver'] === null) {
            $invalidProperties[] = "'timeSolver' can't be null";
        }
        if (($this->container['timeSolver'] < 0)) {
            $invalidProperties[] = "invalid value for 'timeSolver', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['timeSolverCollect']) && ($this->container['timeSolverCollect'] < 0)) {
            $invalidProperties[] = "invalid value for 'timeSolverCollect', must be bigger than or equal to 0.";
        }

        if ($this->container['timeSolverExt'] === null) {
            $invalidProperties[] = "'timeSolverExt' can't be null";
        }
        if (($this->container['timeSolverExt'] < 0)) {
            $invalidProperties[] = "invalid value for 'timeSolverExt', must be bigger than or equal to 0.";
        }

        if ($this->container['timeWait'] === null) {
            $invalidProperties[] = "'timeWait' can't be null";
        }
        if (($this->container['timeWait'] < 0)) {
            $invalidProperties[] = "invalid value for 'timeWait', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['timeCacheOutputs']) && ($this->container['timeCacheOutputs'] < 0)) {
            $invalidProperties[] = "invalid value for 'timeCacheOutputs', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cpuTimeCheckStored']) && ($this->container['cpuTimeCheckStored'] < 0)) {
            $invalidProperties[] = "invalid value for 'cpuTimeCheckStored', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cpuTimeCheckLoaded']) && ($this->container['cpuTimeCheckLoaded'] < 0)) {
            $invalidProperties[] = "invalid value for 'cpuTimeCheckLoaded', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cpuTimeStorage']) && ($this->container['cpuTimeStorage'] < 0)) {
            $invalidProperties[] = "invalid value for 'cpuTimeStorage', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cpuTimeModelDownload']) && ($this->container['cpuTimeModelDownload'] < 0)) {
            $invalidProperties[] = "invalid value for 'cpuTimeModelDownload', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cpuTimeModelOpen']) && ($this->container['cpuTimeModelOpen'] < 0)) {
            $invalidProperties[] = "invalid value for 'cpuTimeModelOpen', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cpuTimeSolver']) && ($this->container['cpuTimeSolver'] < 0)) {
            $invalidProperties[] = "invalid value for 'cpuTimeSolver', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cpuTimeSolverCollect']) && ($this->container['cpuTimeSolverCollect'] < 0)) {
            $invalidProperties[] = "invalid value for 'cpuTimeSolverCollect', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cpuTimeSolverExt']) && ($this->container['cpuTimeSolverExt'] < 0)) {
            $invalidProperties[] = "invalid value for 'cpuTimeSolverExt', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cpuTimeCacheOutputs']) && ($this->container['cpuTimeCacheOutputs'] < 0)) {
            $invalidProperties[] = "invalid value for 'cpuTimeCacheOutputs', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['timeModelPrepare']) && ($this->container['timeModelPrepare'] < 0)) {
            $invalidProperties[] = "invalid value for 'timeModelPrepare', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cpuTimeModelPrepare']) && ($this->container['cpuTimeModelPrepare'] < 0)) {
            $invalidProperties[] = "invalid value for 'cpuTimeModelPrepare', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sizeAssets
     *
     * @return int|null
     */
    public function getSizeAssets()
    {
        return $this->container['sizeAssets'];
    }

    /**
     * Sets sizeAssets
     *
     * @param int|null $sizeAssets Total size in bytes of the uncompressed resulting assets.
     *
     * @return self
     */
    public function setSizeAssets($sizeAssets)
    {
        if (is_null($sizeAssets)) {
            throw new \InvalidArgumentException('non-nullable sizeAssets cannot be null');
        }

        if (($sizeAssets < 0)) {
            throw new \InvalidArgumentException('invalid value for $sizeAssets when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['sizeAssets'] = $sizeAssets;

        return $this;
    }

    /**
     * Gets sizeAssetsStorage
     *
     * @return int|null
     */
    public function getSizeAssetsStorage()
    {
        return $this->container['sizeAssetsStorage'];
    }

    /**
     * Sets sizeAssetsStorage
     *
     * @param int|null $sizeAssetsStorage Total size in bytes of the (potentially compressed) assets uploaded to storage.
     *
     * @return self
     */
    public function setSizeAssetsStorage($sizeAssetsStorage)
    {
        if (is_null($sizeAssetsStorage)) {
            throw new \InvalidArgumentException('non-nullable sizeAssetsStorage cannot be null');
        }

        if (($sizeAssetsStorage < 0)) {
            throw new \InvalidArgumentException('invalid value for $sizeAssetsStorage when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['sizeAssetsStorage'] = $sizeAssetsStorage;

        return $this;
    }

    /**
     * Gets timeCompletion
     *
     * @return int
     */
    public function getTimeCompletion()
    {
        return $this->container['timeCompletion'];
    }

    /**
     * Sets timeCompletion
     *
     * @param int $timeCompletion The number of milliseconds it took to answer the request.
     *
     * @return self
     */
    public function setTimeCompletion($timeCompletion)
    {
        if (is_null($timeCompletion)) {
            throw new \InvalidArgumentException('non-nullable timeCompletion cannot be null');
        }

        if (($timeCompletion < 0)) {
            throw new \InvalidArgumentException('invalid value for $timeCompletion when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['timeCompletion'] = $timeCompletion;

        return $this;
    }

    /**
     * Gets timeModelDownload
     *
     * @return int
     */
    public function getTimeModelDownload()
    {
        return $this->container['timeModelDownload'];
    }

    /**
     * Sets timeModelDownload
     *
     * @param int $timeModelDownload The number of milliseconds it took to download the model from storage. `0` in case model was already downloaded to the instance.
     *
     * @return self
     */
    public function setTimeModelDownload($timeModelDownload)
    {
        if (is_null($timeModelDownload)) {
            throw new \InvalidArgumentException('non-nullable timeModelDownload cannot be null');
        }

        if (($timeModelDownload < 0)) {
            throw new \InvalidArgumentException('invalid value for $timeModelDownload when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['timeModelDownload'] = $timeModelDownload;

        return $this;
    }

    /**
     * Gets timeModelOpen
     *
     * @return int
     */
    public function getTimeModelOpen()
    {
        return $this->container['timeModelOpen'];
    }

    /**
     * Sets timeModelOpen
     *
     * @param int $timeModelOpen The number of milliseconds it took to  load (open) the model. `0` in case model was already loaded.  Note: Does not include time for script compilation and first computation.
     *
     * @return self
     */
    public function setTimeModelOpen($timeModelOpen)
    {
        if (is_null($timeModelOpen)) {
            throw new \InvalidArgumentException('non-nullable timeModelOpen cannot be null');
        }

        if (($timeModelOpen < 0)) {
            throw new \InvalidArgumentException('invalid value for $timeModelOpen when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['timeModelOpen'] = $timeModelOpen;

        return $this;
    }

    /**
     * Gets timeProcessing
     *
     * @return int
     */
    public function getTimeProcessing()
    {
        return $this->container['timeProcessing'];
    }

    /**
     * Sets timeProcessing
     *
     * @param int $timeProcessing The number of milliseconds it took to process the request.
     *
     * @return self
     */
    public function setTimeProcessing($timeProcessing)
    {
        if (is_null($timeProcessing)) {
            throw new \InvalidArgumentException('non-nullable timeProcessing cannot be null');
        }

        if (($timeProcessing < 0)) {
            throw new \InvalidArgumentException('invalid value for $timeProcessing when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['timeProcessing'] = $timeProcessing;

        return $this;
    }

    /**
     * Gets timeCheckStored
     *
     * @return int
     */
    public function getTimeCheckStored()
    {
        return $this->container['timeCheckStored'];
    }

    /**
     * Sets timeCheckStored
     *
     * @param int $timeCheckStored The number of milliseconds it took to carry out checks that are done before loading the model.
     *
     * @return self
     */
    public function setTimeCheckStored($timeCheckStored)
    {
        if (is_null($timeCheckStored)) {
            throw new \InvalidArgumentException('non-nullable timeCheckStored cannot be null');
        }

        if (($timeCheckStored < 0)) {
            throw new \InvalidArgumentException('invalid value for $timeCheckStored when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['timeCheckStored'] = $timeCheckStored;

        return $this;
    }

    /**
     * Gets timeCheckLoaded
     *
     * @return int
     */
    public function getTimeCheckLoaded()
    {
        return $this->container['timeCheckLoaded'];
    }

    /**
     * Sets timeCheckLoaded
     *
     * @param int $timeCheckLoaded The number of milliseconds it took to carry out check that are done after loading the model.
     *
     * @return self
     */
    public function setTimeCheckLoaded($timeCheckLoaded)
    {
        if (is_null($timeCheckLoaded)) {
            throw new \InvalidArgumentException('non-nullable timeCheckLoaded cannot be null');
        }

        if (($timeCheckLoaded < 0)) {
            throw new \InvalidArgumentException('invalid value for $timeCheckLoaded when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['timeCheckLoaded'] = $timeCheckLoaded;

        return $this;
    }

    /**
     * Gets timeStorage
     *
     * @return int|null
     */
    public function getTimeStorage()
    {
        return $this->container['timeStorage'];
    }

    /**
     * Sets timeStorage
     *
     * @param int|null $timeStorage The number of milliseconds it took to upload assets to storage.
     *
     * @return self
     */
    public function setTimeStorage($timeStorage)
    {
        if (is_null($timeStorage)) {
            throw new \InvalidArgumentException('non-nullable timeStorage cannot be null');
        }

        if (($timeStorage < 0)) {
            throw new \InvalidArgumentException('invalid value for $timeStorage when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['timeStorage'] = $timeStorage;

        return $this;
    }

    /**
     * Gets timeSolver
     *
     * @return int
     */
    public function getTimeSolver()
    {
        return $this->container['timeSolver'];
    }

    /**
     * Sets timeSolver
     *
     * @param int $timeSolver The number of milliseconds for Grasshopper solver.
     *
     * @return self
     */
    public function setTimeSolver($timeSolver)
    {
        if (is_null($timeSolver)) {
            throw new \InvalidArgumentException('non-nullable timeSolver cannot be null');
        }

        if (($timeSolver < 0)) {
            throw new \InvalidArgumentException('invalid value for $timeSolver when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['timeSolver'] = $timeSolver;

        return $this;
    }

    /**
     * Gets timeSolverCollect
     *
     * @return int|null
     */
    public function getTimeSolverCollect()
    {
        return $this->container['timeSolverCollect'];
    }

    /**
     * Sets timeSolverCollect
     *
     * @param int|null $timeSolverCollect The number of milliseconds it took to collect output and export data after computation.
     *
     * @return self
     */
    public function setTimeSolverCollect($timeSolverCollect)
    {
        if (is_null($timeSolverCollect)) {
            throw new \InvalidArgumentException('non-nullable timeSolverCollect cannot be null');
        }

        if (($timeSolverCollect < 0)) {
            throw new \InvalidArgumentException('invalid value for $timeSolverCollect when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['timeSolverCollect'] = $timeSolverCollect;

        return $this;
    }

    /**
     * Gets timeSolverExt
     *
     * @return int
     */
    public function getTimeSolverExt()
    {
        return $this->container['timeSolverExt'];
    }

    /**
     * Sets timeSolverExt
     *
     * @param int $timeSolverExt The number of milliseconds it took to download and load the model and setting parameters, and to compute the solution.
     *
     * @return self
     */
    public function setTimeSolverExt($timeSolverExt)
    {
        if (is_null($timeSolverExt)) {
            throw new \InvalidArgumentException('non-nullable timeSolverExt cannot be null');
        }

        if (($timeSolverExt < 0)) {
            throw new \InvalidArgumentException('invalid value for $timeSolverExt when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['timeSolverExt'] = $timeSolverExt;

        return $this;
    }

    /**
     * Gets timeWait
     *
     * @return int
     */
    public function getTimeWait()
    {
        return $this->container['timeWait'];
    }

    /**
     * Sets timeWait
     *
     * @param int $timeWait The number of milliseconds the request was waiting before being processed.
     *
     * @return self
     */
    public function setTimeWait($timeWait)
    {
        if (is_null($timeWait)) {
            throw new \InvalidArgumentException('non-nullable timeWait cannot be null');
        }

        if (($timeWait < 0)) {
            throw new \InvalidArgumentException('invalid value for $timeWait when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['timeWait'] = $timeWait;

        return $this;
    }

    /**
     * Gets timeCacheOutputs
     *
     * @return int|null
     */
    public function getTimeCacheOutputs()
    {
        return $this->container['timeCacheOutputs'];
    }

    /**
     * Sets timeCacheOutputs
     *
     * @param int|null $timeCacheOutputs The number of milliseconds it took to store the results of the request in the cache.
     *
     * @return self
     */
    public function setTimeCacheOutputs($timeCacheOutputs)
    {
        if (is_null($timeCacheOutputs)) {
            throw new \InvalidArgumentException('non-nullable timeCacheOutputs cannot be null');
        }

        if (($timeCacheOutputs < 0)) {
            throw new \InvalidArgumentException('invalid value for $timeCacheOutputs when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['timeCacheOutputs'] = $timeCacheOutputs;

        return $this;
    }

    /**
     * Gets model
     *
     * @return \ShapeDiver\GeometryApiV2\Client\Model\ResComputationComponents|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \ShapeDiver\GeometryApiV2\Client\Model\ResComputationComponents|null $model Information about model computations.
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets cpuTimeCheckStored
     *
     * @return int|null
     */
    public function getCpuTimeCheckStored()
    {
        return $this->container['cpuTimeCheckStored'];
    }

    /**
     * Sets cpuTimeCheckStored
     *
     * @param int|null $cpuTimeCheckStored The number of milliseconds the CPU was used to carry out checks which are done before loading the model.
     *
     * @return self
     */
    public function setCpuTimeCheckStored($cpuTimeCheckStored)
    {
        if (is_null($cpuTimeCheckStored)) {
            throw new \InvalidArgumentException('non-nullable cpuTimeCheckStored cannot be null');
        }

        if (($cpuTimeCheckStored < 0)) {
            throw new \InvalidArgumentException('invalid value for $cpuTimeCheckStored when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['cpuTimeCheckStored'] = $cpuTimeCheckStored;

        return $this;
    }

    /**
     * Gets cpuTimeCheckLoaded
     *
     * @return int|null
     */
    public function getCpuTimeCheckLoaded()
    {
        return $this->container['cpuTimeCheckLoaded'];
    }

    /**
     * Sets cpuTimeCheckLoaded
     *
     * @param int|null $cpuTimeCheckLoaded The number of milliseconds the CPU was used to carry out checks which are done after loading the model.
     *
     * @return self
     */
    public function setCpuTimeCheckLoaded($cpuTimeCheckLoaded)
    {
        if (is_null($cpuTimeCheckLoaded)) {
            throw new \InvalidArgumentException('non-nullable cpuTimeCheckLoaded cannot be null');
        }

        if (($cpuTimeCheckLoaded < 0)) {
            throw new \InvalidArgumentException('invalid value for $cpuTimeCheckLoaded when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['cpuTimeCheckLoaded'] = $cpuTimeCheckLoaded;

        return $this;
    }

    /**
     * Gets cpuTimeStorage
     *
     * @return int|null
     */
    public function getCpuTimeStorage()
    {
        return $this->container['cpuTimeStorage'];
    }

    /**
     * Sets cpuTimeStorage
     *
     * @param int|null $cpuTimeStorage The number of milliseconds the CPU was used to upload assets to storage.
     *
     * @return self
     */
    public function setCpuTimeStorage($cpuTimeStorage)
    {
        if (is_null($cpuTimeStorage)) {
            throw new \InvalidArgumentException('non-nullable cpuTimeStorage cannot be null');
        }

        if (($cpuTimeStorage < 0)) {
            throw new \InvalidArgumentException('invalid value for $cpuTimeStorage when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['cpuTimeStorage'] = $cpuTimeStorage;

        return $this;
    }

    /**
     * Gets cpuTimeModelDownload
     *
     * @return int|null
     */
    public function getCpuTimeModelDownload()
    {
        return $this->container['cpuTimeModelDownload'];
    }

    /**
     * Sets cpuTimeModelDownload
     *
     * @param int|null $cpuTimeModelDownload The number of milliseconds the CPU was used to download the model from storage.
     *
     * @return self
     */
    public function setCpuTimeModelDownload($cpuTimeModelDownload)
    {
        if (is_null($cpuTimeModelDownload)) {
            throw new \InvalidArgumentException('non-nullable cpuTimeModelDownload cannot be null');
        }

        if (($cpuTimeModelDownload < 0)) {
            throw new \InvalidArgumentException('invalid value for $cpuTimeModelDownload when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['cpuTimeModelDownload'] = $cpuTimeModelDownload;

        return $this;
    }

    /**
     * Gets cpuTimeModelOpen
     *
     * @return int|null
     */
    public function getCpuTimeModelOpen()
    {
        return $this->container['cpuTimeModelOpen'];
    }

    /**
     * Sets cpuTimeModelOpen
     *
     * @param int|null $cpuTimeModelOpen The number of milliseconds the CPU was used to  load (open) the model. `0` in case model was already loaded.
     *
     * @return self
     */
    public function setCpuTimeModelOpen($cpuTimeModelOpen)
    {
        if (is_null($cpuTimeModelOpen)) {
            throw new \InvalidArgumentException('non-nullable cpuTimeModelOpen cannot be null');
        }

        if (($cpuTimeModelOpen < 0)) {
            throw new \InvalidArgumentException('invalid value for $cpuTimeModelOpen when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['cpuTimeModelOpen'] = $cpuTimeModelOpen;

        return $this;
    }

    /**
     * Gets cpuTimeSolver
     *
     * @return int|null
     */
    public function getCpuTimeSolver()
    {
        return $this->container['cpuTimeSolver'];
    }

    /**
     * Sets cpuTimeSolver
     *
     * @param int|null $cpuTimeSolver The number of milliseconds the CPU was used for Grasshopper solver.
     *
     * @return self
     */
    public function setCpuTimeSolver($cpuTimeSolver)
    {
        if (is_null($cpuTimeSolver)) {
            throw new \InvalidArgumentException('non-nullable cpuTimeSolver cannot be null');
        }

        if (($cpuTimeSolver < 0)) {
            throw new \InvalidArgumentException('invalid value for $cpuTimeSolver when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['cpuTimeSolver'] = $cpuTimeSolver;

        return $this;
    }

    /**
     * Gets cpuTimeSolverCollect
     *
     * @return int|null
     */
    public function getCpuTimeSolverCollect()
    {
        return $this->container['cpuTimeSolverCollect'];
    }

    /**
     * Sets cpuTimeSolverCollect
     *
     * @param int|null $cpuTimeSolverCollect The number of milliseconds the CPU was used to collect output and export data after computation.
     *
     * @return self
     */
    public function setCpuTimeSolverCollect($cpuTimeSolverCollect)
    {
        if (is_null($cpuTimeSolverCollect)) {
            throw new \InvalidArgumentException('non-nullable cpuTimeSolverCollect cannot be null');
        }

        if (($cpuTimeSolverCollect < 0)) {
            throw new \InvalidArgumentException('invalid value for $cpuTimeSolverCollect when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['cpuTimeSolverCollect'] = $cpuTimeSolverCollect;

        return $this;
    }

    /**
     * Gets cpuTimeSolverExt
     *
     * @return int|null
     */
    public function getCpuTimeSolverExt()
    {
        return $this->container['cpuTimeSolverExt'];
    }

    /**
     * Sets cpuTimeSolverExt
     *
     * @param int|null $cpuTimeSolverExt The number of milliseconds the CPU was used to download and load the model and setting parameters, and to compute the solution.
     *
     * @return self
     */
    public function setCpuTimeSolverExt($cpuTimeSolverExt)
    {
        if (is_null($cpuTimeSolverExt)) {
            throw new \InvalidArgumentException('non-nullable cpuTimeSolverExt cannot be null');
        }

        if (($cpuTimeSolverExt < 0)) {
            throw new \InvalidArgumentException('invalid value for $cpuTimeSolverExt when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['cpuTimeSolverExt'] = $cpuTimeSolverExt;

        return $this;
    }

    /**
     * Gets cpuTimeCacheOutputs
     *
     * @return int|null
     */
    public function getCpuTimeCacheOutputs()
    {
        return $this->container['cpuTimeCacheOutputs'];
    }

    /**
     * Sets cpuTimeCacheOutputs
     *
     * @param int|null $cpuTimeCacheOutputs The number of milliseconds the CPU was used to store the results of the request in the cache.
     *
     * @return self
     */
    public function setCpuTimeCacheOutputs($cpuTimeCacheOutputs)
    {
        if (is_null($cpuTimeCacheOutputs)) {
            throw new \InvalidArgumentException('non-nullable cpuTimeCacheOutputs cannot be null');
        }

        if (($cpuTimeCacheOutputs < 0)) {
            throw new \InvalidArgumentException('invalid value for $cpuTimeCacheOutputs when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['cpuTimeCacheOutputs'] = $cpuTimeCacheOutputs;

        return $this;
    }

    /**
     * Gets timeModelPrepare
     *
     * @return int|null
     */
    public function getTimeModelPrepare()
    {
        return $this->container['timeModelPrepare'];
    }

    /**
     * Sets timeModelPrepare
     *
     * @param int|null $timeModelPrepare The number of milliseconds it took to prepare the model after loading it. As an example, preparation includes compilation of scripts.
     *
     * @return self
     */
    public function setTimeModelPrepare($timeModelPrepare)
    {
        if (is_null($timeModelPrepare)) {
            throw new \InvalidArgumentException('non-nullable timeModelPrepare cannot be null');
        }

        if (($timeModelPrepare < 0)) {
            throw new \InvalidArgumentException('invalid value for $timeModelPrepare when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['timeModelPrepare'] = $timeModelPrepare;

        return $this;
    }

    /**
     * Gets cpuTimeModelPrepare
     *
     * @return int|null
     */
    public function getCpuTimeModelPrepare()
    {
        return $this->container['cpuTimeModelPrepare'];
    }

    /**
     * Sets cpuTimeModelPrepare
     *
     * @param int|null $cpuTimeModelPrepare The number of milliseconds the CPU was used to prepare the model after loading it. As an example, preparation includes compilation of scripts.
     *
     * @return self
     */
    public function setCpuTimeModelPrepare($cpuTimeModelPrepare)
    {
        if (is_null($cpuTimeModelPrepare)) {
            throw new \InvalidArgumentException('non-nullable cpuTimeModelPrepare cannot be null');
        }

        if (($cpuTimeModelPrepare < 0)) {
            throw new \InvalidArgumentException('invalid value for $cpuTimeModelPrepare when calling ResModelComputationStats., must be bigger than or equal to 0.');
        }

        $this->container['cpuTimeModelPrepare'] = $cpuTimeModelPrepare;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


