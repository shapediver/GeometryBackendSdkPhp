<?php
/**
 * ResStatistic
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ShapeDiver\GeometryApiV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Geometry Backend API v2
 *
 * The ShapeDiver Geometry Backend system is used to: * host Grasshopper models in a secure, reliable, scalable, and performant way, * run computations of Grasshopper models, * and cache and output the results of computations and exports.
 *
 * The version of the OpenAPI document: 1.8.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ShapeDiver\GeometryApiV2\Client\Model;

use \ArrayAccess;
use \ShapeDiver\GeometryApiV2\Client\ObjectSerializer;

/**
 * ResStatistic Class Doc Comment
 *
 * @category Class
 * @description Model statistic object.
 * @package  ShapeDiver\GeometryApiV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResStatistic implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResStatistic';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'comptime' => 'int',
        'lastsession' => 'string',
        'lastview' => 'string',
        'memUsage' => 'int',
        'numcomp' => 'int',
        'numsessions' => 'int',
        'requesttime' => 'int',
        'size' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'comptime' => null,
        'lastsession' => null,
        'lastview' => null,
        'memUsage' => null,
        'numcomp' => null,
        'numsessions' => null,
        'requesttime' => null,
        'size' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'comptime' => false,
        'lastsession' => false,
        'lastview' => false,
        'memUsage' => false,
        'numcomp' => false,
        'numsessions' => false,
        'requesttime' => false,
        'size' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comptime' => 'comptime',
        'lastsession' => 'lastsession',
        'lastview' => 'lastview',
        'memUsage' => 'memUsage',
        'numcomp' => 'numcomp',
        'numsessions' => 'numsessions',
        'requesttime' => 'requesttime',
        'size' => 'size'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comptime' => 'setComptime',
        'lastsession' => 'setLastsession',
        'lastview' => 'setLastview',
        'memUsage' => 'setMemUsage',
        'numcomp' => 'setNumcomp',
        'numsessions' => 'setNumsessions',
        'requesttime' => 'setRequesttime',
        'size' => 'setSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comptime' => 'getComptime',
        'lastsession' => 'getLastsession',
        'lastview' => 'getLastview',
        'memUsage' => 'getMemUsage',
        'numcomp' => 'getNumcomp',
        'numsessions' => 'getNumsessions',
        'requesttime' => 'getRequesttime',
        'size' => 'getSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('comptime', $data ?? [], null);
        $this->setIfExists('lastsession', $data ?? [], null);
        $this->setIfExists('lastview', $data ?? [], null);
        $this->setIfExists('memUsage', $data ?? [], null);
        $this->setIfExists('numcomp', $data ?? [], null);
        $this->setIfExists('numsessions', $data ?? [], null);
        $this->setIfExists('requesttime', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['comptime']) && ($this->container['comptime'] < 0)) {
            $invalidProperties[] = "invalid value for 'comptime', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['lastsession']) && !preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/", $this->container['lastsession'])) {
            $invalidProperties[] = "invalid value for 'lastsession', must be conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/.";
        }

        if (!is_null($this->container['lastview']) && !preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/", $this->container['lastview'])) {
            $invalidProperties[] = "invalid value for 'lastview', must be conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/.";
        }

        if (!is_null($this->container['memUsage']) && ($this->container['memUsage'] < 0)) {
            $invalidProperties[] = "invalid value for 'memUsage', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['numcomp']) && ($this->container['numcomp'] < 0)) {
            $invalidProperties[] = "invalid value for 'numcomp', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['numsessions']) && ($this->container['numsessions'] < 0)) {
            $invalidProperties[] = "invalid value for 'numsessions', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['requesttime']) && ($this->container['requesttime'] < 0)) {
            $invalidProperties[] = "invalid value for 'requesttime', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['size']) && ($this->container['size'] < 0)) {
            $invalidProperties[] = "invalid value for 'size', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comptime
     *
     * @return int|null
     */
    public function getComptime()
    {
        return $this->container['comptime'];
    }

    /**
     * Sets comptime
     *
     * @param int|null $comptime Cumulative time (msec) which has been spent for processing computation requests by the workers (pure computation time).
     *
     * @return self
     */
    public function setComptime($comptime)
    {
        if (is_null($comptime)) {
            throw new \InvalidArgumentException('non-nullable comptime cannot be null');
        }

        if (($comptime < 0)) {
            throw new \InvalidArgumentException('invalid value for $comptime when calling ResStatistic., must be bigger than or equal to 0.');
        }

        $this->container['comptime'] = $comptime;

        return $this;
    }

    /**
     * Gets lastsession
     *
     * @return string|null
     */
    public function getLastsession()
    {
        return $this->container['lastsession'];
    }

    /**
     * Sets lastsession
     *
     * @param string|null $lastsession Timestamp of last session created for the model.
     *
     * @return self
     */
    public function setLastsession($lastsession)
    {
        if (is_null($lastsession)) {
            throw new \InvalidArgumentException('non-nullable lastsession cannot be null');
        }

        if ((!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/", ObjectSerializer::toString($lastsession)))) {
            throw new \InvalidArgumentException("invalid value for \$lastsession when calling ResStatistic., must conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/.");
        }

        $this->container['lastsession'] = $lastsession;

        return $this;
    }

    /**
     * Gets lastview
     *
     * @return string|null
     */
    public function getLastview()
    {
        return $this->container['lastview'];
    }

    /**
     * Sets lastview
     *
     * @param string|null $lastview Timestamp of last view of the model.
     *
     * @return self
     */
    public function setLastview($lastview)
    {
        if (is_null($lastview)) {
            throw new \InvalidArgumentException('non-nullable lastview cannot be null');
        }

        if ((!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/", ObjectSerializer::toString($lastview)))) {
            throw new \InvalidArgumentException("invalid value for \$lastview when calling ResStatistic., must conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/.");
        }

        $this->container['lastview'] = $lastview;

        return $this;
    }

    /**
     * Gets memUsage
     *
     * @return int|null
     */
    public function getMemUsage()
    {
        return $this->container['memUsage'];
    }

    /**
     * Sets memUsage
     *
     * @param int|null $memUsage Approximate memory usage of model on workers, in bytes.
     *
     * @return self
     */
    public function setMemUsage($memUsage)
    {
        if (is_null($memUsage)) {
            throw new \InvalidArgumentException('non-nullable memUsage cannot be null');
        }

        if (($memUsage < 0)) {
            throw new \InvalidArgumentException('invalid value for $memUsage when calling ResStatistic., must be bigger than or equal to 0.');
        }

        $this->container['memUsage'] = $memUsage;

        return $this;
    }

    /**
     * Gets numcomp
     *
     * @return int|null
     */
    public function getNumcomp()
    {
        return $this->container['numcomp'];
    }

    /**
     * Sets numcomp
     *
     * @param int|null $numcomp Number of computations which have been carried out for the model by the workers so far.
     *
     * @return self
     */
    public function setNumcomp($numcomp)
    {
        if (is_null($numcomp)) {
            throw new \InvalidArgumentException('non-nullable numcomp cannot be null');
        }

        if (($numcomp < 0)) {
            throw new \InvalidArgumentException('invalid value for $numcomp when calling ResStatistic., must be bigger than or equal to 0.');
        }

        $this->container['numcomp'] = $numcomp;

        return $this;
    }

    /**
     * Gets numsessions
     *
     * @return int|null
     */
    public function getNumsessions()
    {
        return $this->container['numsessions'];
    }

    /**
     * Sets numsessions
     *
     * @param int|null $numsessions Number of sessions which have been opened for the model so far.
     *
     * @return self
     */
    public function setNumsessions($numsessions)
    {
        if (is_null($numsessions)) {
            throw new \InvalidArgumentException('non-nullable numsessions cannot be null');
        }

        if (($numsessions < 0)) {
            throw new \InvalidArgumentException('invalid value for $numsessions when calling ResStatistic., must be bigger than or equal to 0.');
        }

        $this->container['numsessions'] = $numsessions;

        return $this;
    }

    /**
     * Gets requesttime
     *
     * @return int|null
     */
    public function getRequesttime()
    {
        return $this->container['requesttime'];
    }

    /**
     * Sets requesttime
     *
     * @param int|null $requesttime Cumulative time (msec) which has been spent for processing computation requests by the workers (computation time plus overheads).
     *
     * @return self
     */
    public function setRequesttime($requesttime)
    {
        if (is_null($requesttime)) {
            throw new \InvalidArgumentException('non-nullable requesttime cannot be null');
        }

        if (($requesttime < 0)) {
            throw new \InvalidArgumentException('invalid value for $requesttime when calling ResStatistic., must be bigger than or equal to 0.');
        }

        $this->container['requesttime'] = $requesttime;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size File size of the model file in bytes.
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }

        if (($size < 0)) {
            throw new \InvalidArgumentException('invalid value for $size when calling ResStatistic., must be bigger than or equal to 0.');
        }

        $this->container['size'] = $size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


