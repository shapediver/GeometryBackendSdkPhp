<?php
/**
 * ReqModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ShapeDiver\GeometryApiV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Geometry Backend API v2
 *
 * The ShapeDiver Geometry Backend system is used to: * host Grasshopper models in a secure, reliable, scalable, and performant way, * run computations of Grasshopper models, * and cache and output the results of computations and exports.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ShapeDiver\GeometryApiV2\Client\Model;

use \ArrayAccess;
use \ShapeDiver\GeometryApiV2\Client\ObjectSerializer;

/**
 * ReqModel Class Doc Comment
 *
 * @category Class
 * @description Body of a template request.
 * @package  ShapeDiver\GeometryApiV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReqModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReqModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accessdomains' => 'string[]',
        'allowedLibraries' => 'string[]',
        'authGroups' => 'string[]',
        'backendaccess' => 'bool',
        'blockingReasons' => '\ShapeDiver\GeometryApiV2\Client\Model\ReqModelBlockingReasons',
        'filename' => 'string',
        'ftype' => '\ShapeDiver\GeometryApiV2\Client\Model\ReqModelFileType',
        'initialWarmup' => 'bool',
        'id2' => 'string',
        'maxCompTime' => 'int',
        'maxExportSize' => 'int',
        'maxIdleMinutes' => 'int',
        'maxModelSize' => 'int',
        'maxOutputSize' => 'int',
        'maxTextureSize' => 'int',
        'maxWaitTime' => 'int',
        'name' => 'string',
        'numLoadedMax' => 'int',
        'numLoadedMin' => 'int',
        'numPreloadedMin' => 'int',
        'orgId' => 'string',
        'prevId' => 'string',
        'pub' => 'bool',
        'requireIframe' => 'bool',
        'requireToken' => 'bool',
        'sessionRateLimit' => 'int',
        'trust' => '\ShapeDiver\GeometryApiV2\Client\Model\ReqTrustLevel',
        'useCdn' => 'bool',
        'userId' => 'string',
        'webhookUrl' => 'string',
        'webhookToken' => 'string',
        'denyScripts' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accessdomains' => null,
        'allowedLibraries' => null,
        'authGroups' => 'uuid',
        'backendaccess' => null,
        'blockingReasons' => null,
        'filename' => null,
        'ftype' => null,
        'initialWarmup' => null,
        'id2' => 'uuid',
        'maxCompTime' => null,
        'maxExportSize' => null,
        'maxIdleMinutes' => null,
        'maxModelSize' => null,
        'maxOutputSize' => null,
        'maxTextureSize' => null,
        'maxWaitTime' => null,
        'name' => null,
        'numLoadedMax' => null,
        'numLoadedMin' => null,
        'numPreloadedMin' => null,
        'orgId' => 'uuid',
        'prevId' => 'uuid',
        'pub' => null,
        'requireIframe' => null,
        'requireToken' => null,
        'sessionRateLimit' => null,
        'trust' => null,
        'useCdn' => null,
        'userId' => 'uuid',
        'webhookUrl' => null,
        'webhookToken' => null,
        'denyScripts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accessdomains' => false,
        'allowedLibraries' => false,
        'authGroups' => false,
        'backendaccess' => false,
        'blockingReasons' => false,
        'filename' => false,
        'ftype' => false,
        'initialWarmup' => false,
        'id2' => false,
        'maxCompTime' => false,
        'maxExportSize' => false,
        'maxIdleMinutes' => false,
        'maxModelSize' => false,
        'maxOutputSize' => false,
        'maxTextureSize' => false,
        'maxWaitTime' => false,
        'name' => false,
        'numLoadedMax' => false,
        'numLoadedMin' => false,
        'numPreloadedMin' => false,
        'orgId' => false,
        'prevId' => false,
        'pub' => false,
        'requireIframe' => false,
        'requireToken' => false,
        'sessionRateLimit' => false,
        'trust' => false,
        'useCdn' => false,
        'userId' => false,
        'webhookUrl' => false,
        'webhookToken' => false,
        'denyScripts' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accessdomains' => 'accessdomains',
        'allowedLibraries' => 'allowed_libraries',
        'authGroups' => 'auth_groups',
        'backendaccess' => 'backendaccess',
        'blockingReasons' => 'blockingReasons',
        'filename' => 'filename',
        'ftype' => 'ftype',
        'initialWarmup' => 'initial_warmup',
        'id2' => 'id2',
        'maxCompTime' => 'max_comp_time',
        'maxExportSize' => 'max_export_size',
        'maxIdleMinutes' => 'max_idle_minutes',
        'maxModelSize' => 'max_model_size',
        'maxOutputSize' => 'max_output_size',
        'maxTextureSize' => 'max_texture_size',
        'maxWaitTime' => 'max_wait_time',
        'name' => 'name',
        'numLoadedMax' => 'num_loaded_max',
        'numLoadedMin' => 'num_loaded_min',
        'numPreloadedMin' => 'num_preloaded_min',
        'orgId' => 'org_id',
        'prevId' => 'prev_id',
        'pub' => 'pub',
        'requireIframe' => 'require_iframe',
        'requireToken' => 'require_token',
        'sessionRateLimit' => 'session_rate_limit',
        'trust' => 'trust',
        'useCdn' => 'use_cdn',
        'userId' => 'user_id',
        'webhookUrl' => 'webhook_url',
        'webhookToken' => 'webhook_token',
        'denyScripts' => 'deny_scripts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accessdomains' => 'setAccessdomains',
        'allowedLibraries' => 'setAllowedLibraries',
        'authGroups' => 'setAuthGroups',
        'backendaccess' => 'setBackendaccess',
        'blockingReasons' => 'setBlockingReasons',
        'filename' => 'setFilename',
        'ftype' => 'setFtype',
        'initialWarmup' => 'setInitialWarmup',
        'id2' => 'setId2',
        'maxCompTime' => 'setMaxCompTime',
        'maxExportSize' => 'setMaxExportSize',
        'maxIdleMinutes' => 'setMaxIdleMinutes',
        'maxModelSize' => 'setMaxModelSize',
        'maxOutputSize' => 'setMaxOutputSize',
        'maxTextureSize' => 'setMaxTextureSize',
        'maxWaitTime' => 'setMaxWaitTime',
        'name' => 'setName',
        'numLoadedMax' => 'setNumLoadedMax',
        'numLoadedMin' => 'setNumLoadedMin',
        'numPreloadedMin' => 'setNumPreloadedMin',
        'orgId' => 'setOrgId',
        'prevId' => 'setPrevId',
        'pub' => 'setPub',
        'requireIframe' => 'setRequireIframe',
        'requireToken' => 'setRequireToken',
        'sessionRateLimit' => 'setSessionRateLimit',
        'trust' => 'setTrust',
        'useCdn' => 'setUseCdn',
        'userId' => 'setUserId',
        'webhookUrl' => 'setWebhookUrl',
        'webhookToken' => 'setWebhookToken',
        'denyScripts' => 'setDenyScripts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accessdomains' => 'getAccessdomains',
        'allowedLibraries' => 'getAllowedLibraries',
        'authGroups' => 'getAuthGroups',
        'backendaccess' => 'getBackendaccess',
        'blockingReasons' => 'getBlockingReasons',
        'filename' => 'getFilename',
        'ftype' => 'getFtype',
        'initialWarmup' => 'getInitialWarmup',
        'id2' => 'getId2',
        'maxCompTime' => 'getMaxCompTime',
        'maxExportSize' => 'getMaxExportSize',
        'maxIdleMinutes' => 'getMaxIdleMinutes',
        'maxModelSize' => 'getMaxModelSize',
        'maxOutputSize' => 'getMaxOutputSize',
        'maxTextureSize' => 'getMaxTextureSize',
        'maxWaitTime' => 'getMaxWaitTime',
        'name' => 'getName',
        'numLoadedMax' => 'getNumLoadedMax',
        'numLoadedMin' => 'getNumLoadedMin',
        'numPreloadedMin' => 'getNumPreloadedMin',
        'orgId' => 'getOrgId',
        'prevId' => 'getPrevId',
        'pub' => 'getPub',
        'requireIframe' => 'getRequireIframe',
        'requireToken' => 'getRequireToken',
        'sessionRateLimit' => 'getSessionRateLimit',
        'trust' => 'getTrust',
        'useCdn' => 'getUseCdn',
        'userId' => 'getUserId',
        'webhookUrl' => 'getWebhookUrl',
        'webhookToken' => 'getWebhookToken',
        'denyScripts' => 'getDenyScripts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('accessdomains', $data ?? [], null);
        $this->setIfExists('allowedLibraries', $data ?? [], null);
        $this->setIfExists('authGroups', $data ?? [], null);
        $this->setIfExists('backendaccess', $data ?? [], null);
        $this->setIfExists('blockingReasons', $data ?? [], null);
        $this->setIfExists('filename', $data ?? [], null);
        $this->setIfExists('ftype', $data ?? [], null);
        $this->setIfExists('initialWarmup', $data ?? [], null);
        $this->setIfExists('id2', $data ?? [], null);
        $this->setIfExists('maxCompTime', $data ?? [], null);
        $this->setIfExists('maxExportSize', $data ?? [], null);
        $this->setIfExists('maxIdleMinutes', $data ?? [], null);
        $this->setIfExists('maxModelSize', $data ?? [], null);
        $this->setIfExists('maxOutputSize', $data ?? [], null);
        $this->setIfExists('maxTextureSize', $data ?? [], null);
        $this->setIfExists('maxWaitTime', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('numLoadedMax', $data ?? [], null);
        $this->setIfExists('numLoadedMin', $data ?? [], null);
        $this->setIfExists('numPreloadedMin', $data ?? [], null);
        $this->setIfExists('orgId', $data ?? [], null);
        $this->setIfExists('prevId', $data ?? [], null);
        $this->setIfExists('pub', $data ?? [], null);
        $this->setIfExists('requireIframe', $data ?? [], null);
        $this->setIfExists('requireToken', $data ?? [], null);
        $this->setIfExists('sessionRateLimit', $data ?? [], null);
        $this->setIfExists('trust', $data ?? [], null);
        $this->setIfExists('useCdn', $data ?? [], null);
        $this->setIfExists('userId', $data ?? [], null);
        $this->setIfExists('webhookUrl', $data ?? [], null);
        $this->setIfExists('webhookToken', $data ?? [], null);
        $this->setIfExists('denyScripts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['maxCompTime']) && ($this->container['maxCompTime'] < 0)) {
            $invalidProperties[] = "invalid value for 'maxCompTime', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['maxExportSize']) && ($this->container['maxExportSize'] < 0)) {
            $invalidProperties[] = "invalid value for 'maxExportSize', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['maxIdleMinutes']) && ($this->container['maxIdleMinutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'maxIdleMinutes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['maxModelSize']) && ($this->container['maxModelSize'] < 0)) {
            $invalidProperties[] = "invalid value for 'maxModelSize', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['maxOutputSize']) && ($this->container['maxOutputSize'] < 0)) {
            $invalidProperties[] = "invalid value for 'maxOutputSize', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['maxTextureSize']) && ($this->container['maxTextureSize'] < 0)) {
            $invalidProperties[] = "invalid value for 'maxTextureSize', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['maxWaitTime']) && ($this->container['maxWaitTime'] < 0)) {
            $invalidProperties[] = "invalid value for 'maxWaitTime', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['numLoadedMax']) && ($this->container['numLoadedMax'] < 0)) {
            $invalidProperties[] = "invalid value for 'numLoadedMax', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['numLoadedMin']) && ($this->container['numLoadedMin'] < 0)) {
            $invalidProperties[] = "invalid value for 'numLoadedMin', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['numPreloadedMin']) && ($this->container['numPreloadedMin'] < 0)) {
            $invalidProperties[] = "invalid value for 'numPreloadedMin', must be bigger than or equal to 0.";
        }

        if ($this->container['pub'] === null) {
            $invalidProperties[] = "'pub' can't be null";
        }
        if (!is_null($this->container['sessionRateLimit']) && ($this->container['sessionRateLimit'] < 0)) {
            $invalidProperties[] = "invalid value for 'sessionRateLimit', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accessdomains
     *
     * @return string[]|null
     */
    public function getAccessdomains()
    {
        return $this->container['accessdomains'];
    }

    /**
     * Sets accessdomains
     *
     * @param string[]|null $accessdomains List of domains (origins) this model is limited to (is ignored in case `pub` is true).
     *
     * @return self
     */
    public function setAccessdomains($accessdomains)
    {
        if (is_null($accessdomains)) {
            throw new \InvalidArgumentException('non-nullable accessdomains cannot be null');
        }
        $this->container['accessdomains'] = $accessdomains;

        return $this;
    }

    /**
     * Gets allowedLibraries
     *
     * @return string[]|null
     */
    public function getAllowedLibraries()
    {
        return $this->container['allowedLibraries'];
    }

    /**
     * Sets allowedLibraries
     *
     * @param string[]|null $allowedLibraries List of allowed Grasshopper libraries.
     *
     * @return self
     */
    public function setAllowedLibraries($allowedLibraries)
    {
        if (is_null($allowedLibraries)) {
            throw new \InvalidArgumentException('non-nullable allowedLibraries cannot be null');
        }
        $this->container['allowedLibraries'] = $allowedLibraries;

        return $this;
    }

    /**
     * Gets authGroups
     *
     * @return string[]|null
     */
    public function getAuthGroups()
    {
        return $this->container['authGroups'];
    }

    /**
     * Sets authGroups
     *
     * @param string[]|null $authGroups List of allowed auth-groups.
     *
     * @return self
     */
    public function setAuthGroups($authGroups)
    {
        if (is_null($authGroups)) {
            throw new \InvalidArgumentException('non-nullable authGroups cannot be null');
        }
        $this->container['authGroups'] = $authGroups;

        return $this;
    }

    /**
     * Gets backendaccess
     *
     * @return bool|null
     */
    public function getBackendaccess()
    {
        return $this->container['backendaccess'];
    }

    /**
     * Sets backendaccess
     *
     * @param bool|null $backendaccess Should backend access to the model be allowed.
     *
     * @return self
     */
    public function setBackendaccess($backendaccess)
    {
        if (is_null($backendaccess)) {
            throw new \InvalidArgumentException('non-nullable backendaccess cannot be null');
        }
        $this->container['backendaccess'] = $backendaccess;

        return $this;
    }

    /**
     * Gets blockingReasons
     *
     * @return \ShapeDiver\GeometryApiV2\Client\Model\ReqModelBlockingReasons|null
     */
    public function getBlockingReasons()
    {
        return $this->container['blockingReasons'];
    }

    /**
     * Sets blockingReasons
     *
     * @param \ShapeDiver\GeometryApiV2\Client\Model\ReqModelBlockingReasons|null $blockingReasons blockingReasons
     *
     * @return self
     */
    public function setBlockingReasons($blockingReasons)
    {
        if (is_null($blockingReasons)) {
            throw new \InvalidArgumentException('non-nullable blockingReasons cannot be null');
        }
        $this->container['blockingReasons'] = $blockingReasons;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string|null
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string|null $filename Original name of the model's grasshopper file.
     *
     * @return self
     */
    public function setFilename($filename)
    {
        if (is_null($filename)) {
            throw new \InvalidArgumentException('non-nullable filename cannot be null');
        }
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets ftype
     *
     * @return \ShapeDiver\GeometryApiV2\Client\Model\ReqModelFileType|null
     */
    public function getFtype()
    {
        return $this->container['ftype'];
    }

    /**
     * Sets ftype
     *
     * @param \ShapeDiver\GeometryApiV2\Client\Model\ReqModelFileType|null $ftype File type of the model.
     *
     * @return self
     */
    public function setFtype($ftype)
    {
        if (is_null($ftype)) {
            throw new \InvalidArgumentException('non-nullable ftype cannot be null');
        }
        $this->container['ftype'] = $ftype;

        return $this;
    }

    /**
     * Gets initialWarmup
     *
     * @return bool|null
     */
    public function getInitialWarmup()
    {
        return $this->container['initialWarmup'];
    }

    /**
     * Sets initialWarmup
     *
     * @param bool|null $initialWarmup Allows to control whether the model should be warmed up immediately after loading by running a computation. This increases the likelihood of following computation requests to be faster.
     *
     * @return self
     */
    public function setInitialWarmup($initialWarmup)
    {
        if (is_null($initialWarmup)) {
            throw new \InvalidArgumentException('non-nullable initialWarmup cannot be null');
        }
        $this->container['initialWarmup'] = $initialWarmup;

        return $this;
    }

    /**
     * Gets id2
     *
     * @return string|null
     */
    public function getId2()
    {
        return $this->container['id2'];
    }

    /**
     * Sets id2
     *
     * @param string|null $id2 Optional second model ID.
     *
     * @return self
     */
    public function setId2($id2)
    {
        if (is_null($id2)) {
            throw new \InvalidArgumentException('non-nullable id2 cannot be null');
        }
        $this->container['id2'] = $id2;

        return $this;
    }

    /**
     * Gets maxCompTime
     *
     * @return int|null
     */
    public function getMaxCompTime()
    {
        return $this->container['maxCompTime'];
    }

    /**
     * Sets maxCompTime
     *
     * @param int|null $maxCompTime Maximum number of milliseconds allowed for computations of this model.
     *
     * @return self
     */
    public function setMaxCompTime($maxCompTime)
    {
        if (is_null($maxCompTime)) {
            throw new \InvalidArgumentException('non-nullable maxCompTime cannot be null');
        }

        if (($maxCompTime < 0)) {
            throw new \InvalidArgumentException('invalid value for $maxCompTime when calling ReqModel., must be bigger than or equal to 0.');
        }

        $this->container['maxCompTime'] = $maxCompTime;

        return $this;
    }

    /**
     * Gets maxExportSize
     *
     * @return int|null
     */
    public function getMaxExportSize()
    {
        return $this->container['maxExportSize'];
    }

    /**
     * Sets maxExportSize
     *
     * @param int|null $maxExportSize Maximum number of bytes allowed to be exported from a model for a specific set of parameter values.
     *
     * @return self
     */
    public function setMaxExportSize($maxExportSize)
    {
        if (is_null($maxExportSize)) {
            throw new \InvalidArgumentException('non-nullable maxExportSize cannot be null');
        }

        if (($maxExportSize < 0)) {
            throw new \InvalidArgumentException('invalid value for $maxExportSize when calling ReqModel., must be bigger than or equal to 0.');
        }

        $this->container['maxExportSize'] = $maxExportSize;

        return $this;
    }

    /**
     * Gets maxIdleMinutes
     *
     * @return int|null
     */
    public function getMaxIdleMinutes()
    {
        return $this->container['maxIdleMinutes'];
    }

    /**
     * Sets maxIdleMinutes
     *
     * @param int|null $maxIdleMinutes Maximum amount of minutes a loaded model may be unused before it gets unloaded.  Note: Models may get unloaded earlier than that.
     *
     * @return self
     */
    public function setMaxIdleMinutes($maxIdleMinutes)
    {
        if (is_null($maxIdleMinutes)) {
            throw new \InvalidArgumentException('non-nullable maxIdleMinutes cannot be null');
        }

        if (($maxIdleMinutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $maxIdleMinutes when calling ReqModel., must be bigger than or equal to 0.');
        }

        $this->container['maxIdleMinutes'] = $maxIdleMinutes;

        return $this;
    }

    /**
     * Gets maxModelSize
     *
     * @return int|null
     */
    public function getMaxModelSize()
    {
        return $this->container['maxModelSize'];
    }

    /**
     * Sets maxModelSize
     *
     * @param int|null $maxModelSize Maximum number of bytes allowed for the model's Grasshopper file size.
     *
     * @return self
     */
    public function setMaxModelSize($maxModelSize)
    {
        if (is_null($maxModelSize)) {
            throw new \InvalidArgumentException('non-nullable maxModelSize cannot be null');
        }

        if (($maxModelSize < 0)) {
            throw new \InvalidArgumentException('invalid value for $maxModelSize when calling ReqModel., must be bigger than or equal to 0.');
        }

        $this->container['maxModelSize'] = $maxModelSize;

        return $this;
    }

    /**
     * Gets maxOutputSize
     *
     * @return int|null
     */
    public function getMaxOutputSize()
    {
        return $this->container['maxOutputSize'];
    }

    /**
     * Sets maxOutputSize
     *
     * @param int|null $maxOutputSize Maximum number of bytes allowed for an output of a model for a specific set of parameter values.
     *
     * @return self
     */
    public function setMaxOutputSize($maxOutputSize)
    {
        if (is_null($maxOutputSize)) {
            throw new \InvalidArgumentException('non-nullable maxOutputSize cannot be null');
        }

        if (($maxOutputSize < 0)) {
            throw new \InvalidArgumentException('invalid value for $maxOutputSize when calling ReqModel., must be bigger than or equal to 0.');
        }

        $this->container['maxOutputSize'] = $maxOutputSize;

        return $this;
    }

    /**
     * Gets maxTextureSize
     *
     * @return int|null
     */
    public function getMaxTextureSize()
    {
        return $this->container['maxTextureSize'];
    }

    /**
     * Sets maxTextureSize
     *
     * @param int|null $maxTextureSize Allows to configure the maximum number of bytes allowed for a single texture.
     *
     * @return self
     */
    public function setMaxTextureSize($maxTextureSize)
    {
        if (is_null($maxTextureSize)) {
            throw new \InvalidArgumentException('non-nullable maxTextureSize cannot be null');
        }

        if (($maxTextureSize < 0)) {
            throw new \InvalidArgumentException('invalid value for $maxTextureSize when calling ReqModel., must be bigger than or equal to 0.');
        }

        $this->container['maxTextureSize'] = $maxTextureSize;

        return $this;
    }

    /**
     * Gets maxWaitTime
     *
     * @return int|null
     */
    public function getMaxWaitTime()
    {
        return $this->container['maxWaitTime'];
    }

    /**
     * Sets maxWaitTime
     *
     * @param int|null $maxWaitTime Maximum time a computation request may stay waiting before a further worker goes ahead regardless of whether it already has the model loaded, and regardless of `num_loaded_max`. This allows to configure a soft or a hard upper boundary for the number of loaded models.
     *
     * @return self
     */
    public function setMaxWaitTime($maxWaitTime)
    {
        if (is_null($maxWaitTime)) {
            throw new \InvalidArgumentException('non-nullable maxWaitTime cannot be null');
        }

        if (($maxWaitTime < 0)) {
            throw new \InvalidArgumentException('invalid value for $maxWaitTime when calling ReqModel., must be bigger than or equal to 0.');
        }

        $this->container['maxWaitTime'] = $maxWaitTime;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the model.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets numLoadedMax
     *
     * @return int|null
     */
    public function getNumLoadedMax()
    {
        return $this->container['numLoadedMax'];
    }

    /**
     * Sets numLoadedMax
     *
     * @param int|null $numLoadedMax Maximum number of workers that should have the model loaded at the same time.
     *
     * @return self
     */
    public function setNumLoadedMax($numLoadedMax)
    {
        if (is_null($numLoadedMax)) {
            throw new \InvalidArgumentException('non-nullable numLoadedMax cannot be null');
        }

        if (($numLoadedMax < 0)) {
            throw new \InvalidArgumentException('invalid value for $numLoadedMax when calling ReqModel., must be bigger than or equal to 0.');
        }

        $this->container['numLoadedMax'] = $numLoadedMax;

        return $this;
    }

    /**
     * Gets numLoadedMin
     *
     * @return int|null
     */
    public function getNumLoadedMin()
    {
        return $this->container['numLoadedMin'];
    }

    /**
     * Sets numLoadedMin
     *
     * @param int|null $numLoadedMin Minimum number of workers which should have the model loaded once a session to the model gets opened.
     *
     * @return self
     */
    public function setNumLoadedMin($numLoadedMin)
    {
        if (is_null($numLoadedMin)) {
            throw new \InvalidArgumentException('non-nullable numLoadedMin cannot be null');
        }

        if (($numLoadedMin < 0)) {
            throw new \InvalidArgumentException('invalid value for $numLoadedMin when calling ReqModel., must be bigger than or equal to 0.');
        }

        $this->container['numLoadedMin'] = $numLoadedMin;

        return $this;
    }

    /**
     * Gets numPreloadedMin
     *
     * @return int|null
     */
    public function getNumPreloadedMin()
    {
        return $this->container['numPreloadedMin'];
    }

    /**
     * Sets numPreloadedMin
     *
     * @param int|null $numPreloadedMin Minimum number of workers that should always have the model loaded, regardless of session activity. This allows to minimise the likelihood of computation requests being slower due to model loading.
     *
     * @return self
     */
    public function setNumPreloadedMin($numPreloadedMin)
    {
        if (is_null($numPreloadedMin)) {
            throw new \InvalidArgumentException('non-nullable numPreloadedMin cannot be null');
        }

        if (($numPreloadedMin < 0)) {
            throw new \InvalidArgumentException('invalid value for $numPreloadedMin when calling ReqModel., must be bigger than or equal to 0.');
        }

        $this->container['numPreloadedMin'] = $numPreloadedMin;

        return $this;
    }

    /**
     * Gets orgId
     *
     * @return string|null
     */
    public function getOrgId()
    {
        return $this->container['orgId'];
    }

    /**
     * Sets orgId
     *
     * @param string|null $orgId Optional organization ID.
     *
     * @return self
     */
    public function setOrgId($orgId)
    {
        if (is_null($orgId)) {
            throw new \InvalidArgumentException('non-nullable orgId cannot be null');
        }
        $this->container['orgId'] = $orgId;

        return $this;
    }

    /**
     * Gets prevId
     *
     * @return string|null
     */
    public function getPrevId()
    {
        return $this->container['prevId'];
    }

    /**
     * Sets prevId
     *
     * @param string|null $prevId Model ID of this model's previous version.
     *
     * @return self
     */
    public function setPrevId($prevId)
    {
        if (is_null($prevId)) {
            throw new \InvalidArgumentException('non-nullable prevId cannot be null');
        }
        $this->container['prevId'] = $prevId;

        return $this;
    }

    /**
     * Gets pub
     *
     * @return bool
     */
    public function getPub()
    {
        return $this->container['pub'];
    }

    /**
     * Sets pub
     *
     * @param bool $pub Allows public access (ignore `accessdomains`).
     *
     * @return self
     */
    public function setPub($pub)
    {
        if (is_null($pub)) {
            throw new \InvalidArgumentException('non-nullable pub cannot be null');
        }
        $this->container['pub'] = $pub;

        return $this;
    }

    /**
     * Gets requireIframe
     *
     * @return bool|null
     */
    public function getRequireIframe()
    {
        return $this->container['requireIframe'];
    }

    /**
     * Sets requireIframe
     *
     * @param bool|null $requireIframe Enforces iframe embedding instead of direct embedding.
     *
     * @return self
     */
    public function setRequireIframe($requireIframe)
    {
        if (is_null($requireIframe)) {
            throw new \InvalidArgumentException('non-nullable requireIframe cannot be null');
        }
        $this->container['requireIframe'] = $requireIframe;

        return $this;
    }

    /**
     * Gets requireToken
     *
     * @return bool|null
     */
    public function getRequireToken()
    {
        return $this->container['requireToken'];
    }

    /**
     * Sets requireToken
     *
     * @param bool|null $requireToken Enforces token-based authentication for this model.
     *
     * @return self
     */
    public function setRequireToken($requireToken)
    {
        if (is_null($requireToken)) {
            throw new \InvalidArgumentException('non-nullable requireToken cannot be null');
        }
        $this->container['requireToken'] = $requireToken;

        return $this;
    }

    /**
     * Gets sessionRateLimit
     *
     * @return int|null
     */
    public function getSessionRateLimit()
    {
        return $this->container['sessionRateLimit'];
    }

    /**
     * Sets sessionRateLimit
     *
     * @param int|null $sessionRateLimit Limits the number of sessions that can be created by a specific IP address in one hour.
     *
     * @return self
     */
    public function setSessionRateLimit($sessionRateLimit)
    {
        if (is_null($sessionRateLimit)) {
            throw new \InvalidArgumentException('non-nullable sessionRateLimit cannot be null');
        }

        if (($sessionRateLimit < 0)) {
            throw new \InvalidArgumentException('invalid value for $sessionRateLimit when calling ReqModel., must be bigger than or equal to 0.');
        }

        $this->container['sessionRateLimit'] = $sessionRateLimit;

        return $this;
    }

    /**
     * Gets trust
     *
     * @return \ShapeDiver\GeometryApiV2\Client\Model\ReqTrustLevel|null
     */
    public function getTrust()
    {
        return $this->container['trust'];
    }

    /**
     * Sets trust
     *
     * @param \ShapeDiver\GeometryApiV2\Client\Model\ReqTrustLevel|null $trust Can this model be trusted (controls whether failed computations will be retried).
     *
     * @return self
     */
    public function setTrust($trust)
    {
        if (is_null($trust)) {
            throw new \InvalidArgumentException('non-nullable trust cannot be null');
        }
        $this->container['trust'] = $trust;

        return $this;
    }

    /**
     * Gets useCdn
     *
     * @return bool|null
     */
    public function getUseCdn()
    {
        return $this->container['useCdn'];
    }

    /**
     * Sets useCdn
     *
     * @param bool|null $useCdn Allows the usage of the CDN for fast content distribution.
     *
     * @return self
     */
    public function setUseCdn($useCdn)
    {
        if (is_null($useCdn)) {
            throw new \InvalidArgumentException('non-nullable useCdn cannot be null');
        }
        $this->container['useCdn'] = $useCdn;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string|null $userId Optional user ID.
     *
     * @return self
     */
    public function setUserId($userId)
    {
        if (is_null($userId)) {
            throw new \InvalidArgumentException('non-nullable userId cannot be null');
        }
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets webhookUrl
     *
     * @return string|null
     */
    public function getWebhookUrl()
    {
        return $this->container['webhookUrl'];
    }

    /**
     * Sets webhookUrl
     *
     * @param string|null $webhookUrl The webhook-url for updating the platform backend about model status changes.
     *
     * @return self
     */
    public function setWebhookUrl($webhookUrl)
    {
        if (is_null($webhookUrl)) {
            throw new \InvalidArgumentException('non-nullable webhookUrl cannot be null');
        }
        $this->container['webhookUrl'] = $webhookUrl;

        return $this;
    }

    /**
     * Gets webhookToken
     *
     * @return string|null
     */
    public function getWebhookToken()
    {
        return $this->container['webhookToken'];
    }

    /**
     * Sets webhookToken
     *
     * @param string|null $webhookToken The webhook-token for authentication used by the webhook-url.
     *
     * @return self
     */
    public function setWebhookToken($webhookToken)
    {
        if (is_null($webhookToken)) {
            throw new \InvalidArgumentException('non-nullable webhookToken cannot be null');
        }
        $this->container['webhookToken'] = $webhookToken;

        return $this;
    }

    /**
     * Gets denyScripts
     *
     * @return bool|null
     */
    public function getDenyScripts()
    {
        return $this->container['denyScripts'];
    }

    /**
     * Sets denyScripts
     *
     * @param bool|null $denyScripts Allows to control whether the model's Grasshopper file can contain scripts.
     *
     * @return self
     */
    public function setDenyScripts($denyScripts)
    {
        if (is_null($denyScripts)) {
            throw new \InvalidArgumentException('non-nullable denyScripts cannot be null');
        }
        $this->container['denyScripts'] = $denyScripts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


